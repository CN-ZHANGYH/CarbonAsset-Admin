package com.ruoyi.carbon.raw;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.StaticStruct;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple10;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class CarbonAssetService extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","ffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087826003018190555086826004019080519060200190612ffd9291906175cd565b50858260050190805190602001906130169291906175cd565b50600c6004549080600181540180825580915050600190039060005260206000200160009091909190915055600460008154809291906001019190505550873373ffffffffffffffffffffffffffffffffffffffff167fbb9c2e34b3129c96ffb467ac4d8c9ddd72161d84bf61ee4bb29e6fc96e4f3d0160405160405180910390a360c892508282806040518061010001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131b85780601f1061318d576101008083540402835291602001916131b8565b820191906000526020600020905b81548152906001019060200180831161319b57829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561325a5780601f1061322f5761010080835404028352916020019161325a565b820191906000526020600020905b81548152906001019060200180831161323d57829003601f168201915b505050505081526020016006820160009054906101000a900460ff161515151581526020016007820154815250509050945094505050505b94509492505050565b60025481565b60136020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003015490806004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156133855780601f1061335a57610100808354040283529160200191613385565b820191906000526020600020905b81548152906001019060200180831161336857829003601f168201915b505050505090806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156134235780601f106133f857610100808354040283529160200191613423565b820191906000526020600020905b81548152906001019060200180831161340657829003601f168201915b5050505050908060060160009054906101000a900460ff16908060070154905088565b600c818154811061345357fe5b906000526020600020016000915090505481565b6000613471617499565b600080905084600e60008054815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561383b57600860005490806001815401808255809150506001900390600052602060002001600090919091909150556000548160000181905550858160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848160020190805190602001906135f69291906175cd565b506000816003018190555060008160040181905550600081600501819055506000816006018190555060008160070160006101000a81548160ff02191690831515021790555060018160070160016101000a81548160ff021916908360ff160217905550600054816008018190555060008081548092919060010191905055507fe29d35093005f4d575e1003753426b57a7f64378ba73332eef9c6ccc2b8decd686426040516136a79291906186b7565b60405180910390a160c8915081818060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156137bb5780601f10613790576101008083540402835291602001916137bb565b820191906000526020600020905b81548152906001019060200180831161379e57829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff1660ff1660ff1681526020016008820154815250509050935093505050613a05565b600f60008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061ea61915081818060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156139895780601f1061395e57610100808354040283529160200191613989565b820191906000526020600020905b81548152906001019060200180831161396c57829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff1660ff1660ff16815260200160088201548152505090509350935050505b9250929050565b6000806000809050600073ffffffffffffffffffffffffffffffffffffffff16600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613ac05761ea6490508060008090509250925050613b60565b83600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008282540192505081905550833373ffffffffffffffffffffffffffffffffffffffff167fbbe9be53d55700e1fd70417958eab8a1a683821097c7e0f15f44a700302c682f60405160405180910390a360c89050808492509250505b915091565b60098181548110613b7257fe5b906000526020600020016000915090505481565b600a8181548110613b9357fe5b906000526020600020016000915090505481565b60008060008090506000600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006013600088815260200190815260200160002090508873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613c505761ea62925082600094509450505050613d37565b8515613d0d57858160060160006101000a81548160ff02191690831515021790555080600301546010600084600801548152602001908152602001600020600901600082825403925050819055508515158873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167f1043f0246002cac4c27e5d6735b785083279296edf994949874a91e3320f81e160405160405180910390a460c89250828694509450505050613d37565b858160060160006101000a81548160ff02191690831515021790555060c892508286945094505050505b94509492505050565b613d4861764d565b6012600083815260200190815260200160002060405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613e1e5780601f10613df357610100808354040283529160200191613e1e565b820191906000526020600020905b815481529060010190602001808311613e0157829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820154815250509050919050565b60146020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060160009054906101000a900460ff16905087565b60008090505b6008805490508110156141bd57613f78617499565b600f6000600e600060088681548110613f8d57fe5b9060005260206000200154815260200190815260200160002060009054906101000a900473ffffff","","","816006016000828254039250508190555081601060008360080154815260200190815260200160002060090160008282540192505081905550505050565b615ffb617570565b601360008381526020019081526020016000206040518061010001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156161275780601f106160fc57610100808354040283529160200191616127565b820191906000526020600020905b81548152906001019060200180831161610a57829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156161c95780601f1061619e576101008083540402835291602001916161c9565b820191906000526020600020905b8154815290600101906020018083116161ac57829003601f168201915b505050505081526020016006820160009054906101000a900460ff161515151581526020016007820154815250509050919050565b600d818154811061620b57fe5b906000526020600020016000915090505481565b60015481565b60055481565b600b818154811061623857fe5b906000526020600020016000915090505481565b600061625661764d565b60008090506000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600f60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000601060008460080154815260200190815260200160002090506000601460008a815260200190815260200160002090506000601260006003548152602001908152602001600020905081600401548902856003015410156164e45762011172955085818060405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561640a5780601f106163df5761010080835404028352916020019161640a565b820191906000526020600020905b8154815290600101906020018083116163ed57829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152602001600782015481525050905097509750505050505050616a94565b6000826003015414156166b55760008260060160006101000a81548160ff021916908360ff16021790555062011174955085818060405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156165db5780601f106165b0576101008083540402835291602001916165db565b820191906000526020600020905b8154815290600101906020018083116165be57829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152602001600782015481525050905097509750505050505050616a94565b888360090160008282540192505081905550888260030160008282540392505081905550816004015489028560030160008282540392505081905550816004015489028460030160008282540192505081905550600354816000018190555084600001548160010181905550836000015481600201819055506040518060400160405280600f81526020017fe7a2b3e9a29de5baa6e4baa4e69893000000000000000000000000000000000081525081600301908051906020019061677b9291906175cd565b508460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160060181905550888160070181905550600b6003549080600181540180825580915050600190039060005260206000200160009091909190915055600360008154809291906001019190505550883373ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167f3009ed8ad77340994eae5aa07e992c4dc4ead947eb9b4f5ce5ac9e7162ffeffc60405160405180910390a460c8955085818060405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156169be5780601f10616993576101008083540402835291602001916169be565b820191906000526020600020905b8154815290600101906020018083116169a157829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820154815250509050975097505050505050505b935093915050565b60116020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015616b745780601f10616b4957610100808354040283529160200191616b74565b820191906000526020600020905b815481529060010190602001808311616b5757829003601f168201915b5050505050908060030160009054906101000a900460ff16905084565b6000616b9b6176be565b60008090506000601160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415616e7557600960025490806001815401808255809150506001900390600052602060002001600090919091909150556002548160000181905550858160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084816002019080519060200190616ccd9291906175cd565b5060028160030160006101000a81548160ff021916908360ff1602179055506002600081548092919060010191905055507fe29d35093005f4d575e1003753426b57a7f64378ba73332eef9c6ccc2b8decd68642604051616d2f9291906186b7565b60405180910390a160c89150818180604051806080016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015616e425780601f10616e1757610100808354040283529160200191616e42565b820191906000526020600020905b815481529060010190602001808311616e2557829003601f168201915b505050505081526020016003820160009054906101000a900460ff1660ff1660ff16815250509050935093505050616ff1565b601160008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061ea619150818180604051806080016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015616fc25780601f10616f9757610100808354040283529160200191616fc2565b820191906000526020600020905b81548152906001019060200180831161","","","50565b60005b83811015618fd6578082015181840152602081019050618fbb565b83811115618fe5576000848401525b50505050565b6000601f19601f8301169050919050565b61900581618f4a565b811461901057600080fd5b50565b61901c81618f5c565b811461902757600080fd5b50565b61903381618f92565b811461903e57600080fd5b5056fea26469706673582212208c286041134d01c445f021c3a2aa132eda21847b310c0121029b043bed2648db64736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_emissionEmission\",\"type\":\"uint256\"}],\"name\":\"EnterpriseEmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_emissionLimitCount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SellEmissionLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferEmissionLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UpdateBalnce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_emissionLimit\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_totalEmissions\",\"type\":\"uint256\"}],\"name\":\"UpdateEnterpriseEmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_emissionEmission\",\"type\":\"uint256\"}],\"name\":\"UploadEnterpriseEmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_acount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"UploadQualification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_registerTime\",\"type\":\"uint256\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_form\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_isAppore\",\"type\":\"bool\"}],\"name\":\"VerifyEnterpriseEmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_emissionLimit\",\"type\":\"uint256\"}],\"name\":\"VerifyQualification\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EmissionResourceID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EmissionResourceIDList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EmissionResourcesMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"emissionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissions\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"emissionWay\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isApprove\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"emissionTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnterpriseAssetID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EnterpriseAssetIDList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EnterpriseAssetsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnterpriseID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EnterpriseIDList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"EnterprisesMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enterpriseName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseTotalEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseOverEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseCarbonCredits\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enterpriseVerified\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"userType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"qualificationId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QualificationID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"QualificationIDList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"QualificationsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qualificationId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"qualificationName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationContent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationLeader\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationIndustry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationUserName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"qualificationUploadTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualificationAuditTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"qualificationVerifiedRegulator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qualificationEmissionLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RegulatorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RegulatorIDList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RegulatorsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"regulatorId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"regulatorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"regulatorName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"userType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNIN_CREDIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_EMISSION\",\"outputs\":[{\"internal","Type\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TransactionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TransactionIDList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TransactionsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"transactionOrderName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"transactionBuyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transactionSellAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transactionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionQuantity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseSeller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_eassetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"buyEmissionLimit\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"transactionOrderName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"transactionBuyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transactionSellAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transactionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionQuantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Transaction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_credits\",\"type\":\"uint256\"}],\"name\":\"byCreditsExchangedEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_emmissionid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_emissionEmission\",\"type\":\"uint256\"}],\"name\":\"enterpriseEmission\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_qualificationEmissionLimit\",\"type\":\"uint256\"}],\"name\":\"initEmissionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_enterpriseAddressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_credited\",\"type\":\"uint256\"}],\"name\":\"initPointsRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"queryEmissionResourceByPage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"emissionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissions\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"emissionWay\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isApprove\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"emissionTime\",\"type\":\"uint256\"}],\"internalType\":\"struct EmissionResource[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"queryEnterpriseAssetByPage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct EnterpriseAsset[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"queryTransactionsByPage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"transactionOrderName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"transactionBuyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transactionSellAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transactionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionQuantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_enterpriseName\",\"type\":\"string\"}],\"name\":\"registerEnterprise\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enterpriseName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseTotalEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseOverEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseCarbonCredits\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enterpriseVerified\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"userType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"qualificationId\",\"type\":\"uint256\"}],\"internalType\":\"struct Enterprise\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_regulatorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_regulatorName\",\"type\":\"string\"}],\"name\":\"registerRegulator\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"regulatorId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"regulatorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"regulatorName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"userType\",\"type\":\"uint8\"}],\"internalType\":\"struct Regulator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emmissionid\",\"type\":\"uint256\"}],\"name\":\"selectEmissionResourceInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"emissionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissions\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"emissionWay\",\"type\":\"s","tring\"},{\"internalType\":\"bool\",\"name\":\"isApprove\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"emissionTime\",\"type\":\"uint256\"}],\"internalType\":\"struct EmissionResource\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"}],\"name\":\"selectEnterpriseInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enterpriseName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseTotalEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseOverEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseCarbonCredits\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enterpriseVerified\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"userType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"qualificationId\",\"type\":\"uint256\"}],\"internalType\":\"struct Enterprise\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"}],\"name\":\"selectQualificationInfo\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"qualificationId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"qualificationName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationContent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationLeader\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationIndustry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationUserName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"qualificationUploadTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualificationAuditTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"qualificationVerifiedRegulator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qualificationEmissionLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct Qualification\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eassetId\",\"type\":\"uint256\"}],\"name\":\"selectSellerAssetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct EnterpriseAsset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"selectTransactionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"transactionOrderName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"transactionBuyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transactionSellAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transactionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionQuantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Transaction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enterpriseID\",\"type\":\"uint256\"}],\"name\":\"selectUserAddress\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emissionLimitCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellEmissionLimit\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct EnterpriseAsset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"}],\"name\":\"signIn\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_credit\",\"type\":\"uint256\"}],\"name\":\"subEnterpriseCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emissionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_emissionLimitCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateEmissionAsset\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_enterpriseName\",\"type\":\"string\"}],\"name\":\"updateEnterprise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emmissionsCount\",\"type\":\"uint256\"}],\"name\":\"updateEnterpriseEmission\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_emissionEmission\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_emissionWay\",\"type\":\"string\"}],\"name\":\"uploadEnterpriseEmission\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"emissionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissions\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"emissionWay\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isApprove\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"emissionTime\",\"type\":\"uint256\"}],\"internalType\":\"struct EmissionResource\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_qualificationName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_qualificationContent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_qualificationLeader\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_qualificationIndustry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_qualificationUserName\",\"type\":\"string\"}],\"name\":\"uploadQualification\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"qualificationId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"qualificationName\",\"type\":\"string\"},{\"internalType\":","\"string\",\"name\":\"qualificationContent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationLeader\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationIndustry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationUserName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"qualificationUploadTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualificationAuditTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"qualificationVerifiedRegulator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qualificationEmissionLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct Qualification\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIdQueryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_regularAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_emmissionid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isApprove\",\"type\":\"bool\"}],\"name\":\"verifyEnterpriseEmission\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_regulatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isApprove\",\"type\":\"bool\"}],\"name\":\"verifyQualification\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"qualificationId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"qualificationName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationContent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationLeader\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationIndustry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationUserName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"qualificationUploadTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualificationAuditTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"qualificationVerifiedRegulator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qualificationEmissionLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct Qualification\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_EMISSIONRESOURCEID = "EmissionResourceID";

    public static final String FUNC_EMISSIONRESOURCEIDLIST = "EmissionResourceIDList";

    public static final String FUNC_EMISSIONRESOURCESMAP = "EmissionResourcesMap";

    public static final String FUNC_ENTERPRISEASSETID = "EnterpriseAssetID";

    public static final String FUNC_ENTERPRISEASSETIDLIST = "EnterpriseAssetIDList";

    public static final String FUNC_ENTERPRISEASSETSMAP = "EnterpriseAssetsMap";

    public static final String FUNC_ENTERPRISEID = "EnterpriseID";

    public static final String FUNC_ENTERPRISEIDLIST = "EnterpriseIDList";

    public static final String FUNC_ENTERPRISESMAP = "EnterprisesMap";

    public static final String FUNC_QUALIFICATIONID = "QualificationID";

    public static final String FUNC_QUALIFICATIONIDLIST = "QualificationIDList";

    public static final String FUNC_QUALIFICATIONSMAP = "QualificationsMap";

    public static final String FUNC_REGULATORID = "RegulatorID";

    public static final String FUNC_REGULATORIDLIST = "RegulatorIDList";

    public static final String FUNC_REGULATORSMAP = "RegulatorsMap";

    public static final String FUNC_SIGNIN_CREDIT = "SIGNIN_CREDIT";

    public static final String FUNC_TOTAL_EMISSION = "TOTAL_EMISSION";

    public static final String FUNC_TRANSACTIONID = "TransactionID";

    public static final String FUNC_TRANSACTIONIDLIST = "TransactionIDList";

    public static final String FUNC_TRANSACTIONSMAP = "TransactionsMap";

    public static final String FUNC_BUYEMISSIONLIMIT = "buyEmissionLimit";

    public static final String FUNC_BYCREDITSEXCHANGEDEMISSION = "byCreditsExchangedEmission";

    public static final String FUNC_ENTERPRISEEMISSION = "enterpriseEmission";

    public static final String FUNC_INITEMISSIONLIMIT = "initEmissionLimit";

    public static final String FUNC_INITPOINTSREWARDS = "initPointsRewards";

    public static final String FUNC_QUERYEMISSIONRESOURCEBYPAGE = "queryEmissionResourceByPage";

    public static final String FUNC_QUERYENTERPRISEASSETBYPAGE = "queryEnterpriseAssetByPage";

    public static final String FUNC_QUERYTRANSACTIONSBYPAGE = "queryTransactionsByPage";

    public static final String FUNC_REGISTERENTERPRISE = "registerEnterprise";

    public static final String FUNC_REGISTERREGULATOR = "registerRegulator";

    public static final String FUNC_SELECTEMISSIONRESOURCEINFO = "selectEmissionResourceInfo";

    public static final String FUNC_SELECTENTERPRISEINFO = "selectEnterpriseInfo";

    public static final String FUNC_SELECTQUALIFICATIONINFO = "selectQualificationInfo";

    public static final String FUNC_SELECTSELLERASSETINFO = "selectSellerAssetInfo";

    public static final String FUNC_SELECTTRANSACTIONINFO = "selectTransactionInfo";

    public static final String FUNC_SELECTUSERADDRESS = "selectUserAddress";

    public static final String FUNC_SELLEMISSIONLIMIT = "sellEmissionLimit";

    public static final String FUNC_SIGNIN = "signIn";

    public static final String FUNC_SUBENTERPRISECREDIT = "subEnterpriseCredit";

    public static final String FUNC_UPDATEBALANCE = "updateBalance";

    public static final String FUNC_UPDATEEMISSIONASSET = "updateEmissionAsset";

    public static final String FUNC_UPDATEENTERPRISE = "updateEnterprise";

    public static final String FUNC_UPDATEENTERPRISEEMISSION = "updateEnterpriseEmission";

    public static final String FUNC_UPLOADENTERPRISEEMISSION = "uploadEnterpriseEmission";

    public static final String FUNC_UPLOADQUALIFICATION = "uploadQualification";

    public static final String FUNC_USERIDQUERYADDRESS = "userIdQueryAddress";

    public static final String FUNC_VERIFYENTERPRISEEMISSION = "verifyEnterpriseEmission";

    public static final String FUNC_VERIFYQUALIFICATION = "verifyQualification";

    public static final Event ENTERPRISEEMISSION_EVENT = new Event("EnterpriseEmission",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event SELLEMISSIONLIMIT_EVENT = new Event("SellEmissionLimit",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}));
    ;


    public static final Event TRANSFEREMISSIONLIMIT_EVENT = new Event("TransferEmissionLimit",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UPDATEBALNCE_EVENT = new Event("UpdateBalnce",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UPDATEEMISSIONLIMIT_EVENT = new Event("UpdateEmissionLimit",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UPDATEENTERPRISEEMISSION_EVENT = new Event("UpdateEnterpriseEmission",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UPLOADENTERPRISEEMISSION_EVENT = new Event("UploadEnterpriseEmission",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UPLOADQUALIFICATION_EVENT = new Event("UploadQualification",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event USERREGISTERED_EVENT = new Event("UserRegistered",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VERIFYENTERPRISEEMISSION_EVENT = new Event("VerifyEnterpriseEmission",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>(true) {}));
    ;

    public static final Event VERIFYQUALIFICATION_EVENT = new Event("VerifyQualification",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected CarbonAssetService(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<EnterpriseEmissionEventResponse> getEnterpriseEmissionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ENTERPRISEEMISSION_EVENT, transactionReceipt);
        ArrayList<EnterpriseEmissionEventResponse> responses = new ArrayList<EnterpriseEmissionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            EnterpriseEmissionEventResponse typedResponse = new EnterpriseEmissionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._emissionEmission = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeEnterpriseEmissionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeEnterpriseEmissionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SellEmissionLimitEventResponse> getSellEmissionLimitEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SELLEMISSIONLIMIT_EVENT, transactionReceipt);
        ArrayList<SellEmissionLimitEventResponse> responses = new ArrayList<SellEmissionLimitEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SellEmissionLimitEventResponse typedResponse = new SellEmissionLimitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._emissionLimitCount = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._amount = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSellEmissionLimitEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SELLEMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSellEmissionLimitEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SELLEMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferEmissionLimitEventResponse> getTransferEmissionLimitEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREMISSIONLIMIT_EVENT, transactionReceipt);
        ArrayList<TransferEmissionLimitEventResponse> responses = new ArrayList<TransferEmissionLimitEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEmissionLimitEventResponse typedResponse = new TransferEmissionLimitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._amount = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferEmissionLimitEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferEmissionLimitEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateBalnceEventResponse> getUpdateBalnceEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEBALNCE_EVENT, transactionReceipt);
        ArrayList<UpdateBalnceEventResponse> responses = new ArrayList<UpdateBalnceEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateBalnceEventResponse typedResponse = new UpdateBalnceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._amount = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateBalnceEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEBALNCE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateBalnceEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEBALNCE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateEmissionLimitEventResponse> getUpdateEmissionLimitEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEEMISSIONLIMIT_EVENT, transactionReceipt);
        ArrayList<UpdateEmissionLimitEventResponse> responses = new ArrayList<UpdateEmissionLimitEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateEmissionLimitEventResponse typedResponse = new UpdateEmissionLimitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._emissionLimit = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateEmissionLimitEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEEMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateEmissionLimitEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEEMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateEnterpriseEmissionEventResponse> getUpdateEnterpriseEmissionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEENTERPRISEEMISSION_EVENT, transactionReceipt);
        ArrayList<UpdateEnterpriseEmissionEventResponse> responses = new ArrayList<UpdateEnterpriseEmissionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateEnterpriseEmissionEventResponse typedResponse = new UpdateEnterpriseEmissionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._totalEmissions = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateEnterpriseEmissionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateEnterpriseEmissionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UploadEnterpriseEmissionEventResponse> getUploadEnterpriseEmissionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPLOADENTERPRISEEMISSION_EVENT, transactionReceipt);
        ArrayList<UploadEnterpriseEmissionEventResponse> responses = new ArrayList<UploadEnterpriseEmissionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UploadEnterpriseEmissionEventResponse typedResponse = new UploadEnterpriseEmissionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._emissionEmission = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUploadEnterpriseEmissionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPLOADENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUploadEnterpriseEmissionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPLOADENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UploadQualificationEventResponse> getUploadQualificationEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPLOADQUALIFICATION_EVENT, transactionReceipt);
        ArrayList<UploadQualificationEventResponse> responses = new ArrayList<UploadQualificationEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UploadQualificationEventResponse typedResponse = new UploadQualificationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._acount = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._name = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._content = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUploadQualificationEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPLOADQUALIFICATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUploadQualificationEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPLOADQUALIFICATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UserRegisteredEventResponse> getUserRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(USERREGISTERED_EVENT, transactionReceipt);
        ArrayList<UserRegisteredEventResponse> responses = new ArrayList<UserRegisteredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UserRegisteredEventResponse typedResponse = new UserRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._registerTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUserRegisteredEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(USERREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUserRegisteredEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(USERREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<VerifyEnterpriseEmissionEventResponse> getVerifyEnterpriseEmissionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYENTERPRISEEMISSION_EVENT, transactionReceipt);
        ArrayList<VerifyEnterpriseEmissionEventResponse> responses = new ArrayList<VerifyEnterpriseEmissionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            VerifyEnterpriseEmissionEventResponse typedResponse = new VerifyEnterpriseEmissionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._form = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._isAppore = (Boolean) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeVerifyEnterpriseEmissionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(VERIFYENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeVerifyEnterpriseEmissionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(VERIFYENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<VerifyQualificationEventResponse> getVerifyQualificationEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYQUALIFICATION_EVENT, transactionReceipt);
        ArrayList<VerifyQualificationEventResponse> responses = new ArrayList<VerifyQualificationEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            VerifyQualificationEventResponse typedResponse = new VerifyQualificationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._emissionLimit = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeVerifyQualificationEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(VERIFYQUALIFICATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeVerifyQualificationEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(VERIFYQUALIFICATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public BigInteger EmissionResourceID() throws ContractException {
        final Function function = new Function(FUNC_EMISSIONRESOURCEID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger EmissionResourceIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_EMISSIONRESOURCEIDLIST,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple8<BigInteger, BigInteger, String, BigInteger, String, String, Boolean, BigInteger> EmissionResourcesMap(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_EMISSIONRESOURCESMAP,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, BigInteger, String, BigInteger, String, String, Boolean, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (Boolean) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue());
    }

    public BigInteger EnterpriseAssetID() throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISEASSETID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger EnterpriseAssetIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISEASSETIDLIST,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple7<BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger> EnterpriseAssetsMap(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISEASSETSMAP,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue(),
                (BigInteger) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue());
    }

    public BigInteger EnterpriseID() throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISEID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger EnterpriseIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISEIDLIST,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple10<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, BigInteger> EnterprisesMap(String param0) throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISESMAP,
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple10<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue(),
                (BigInteger) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue(),
                (Boolean) results.get(7).getValue(),
                (BigInteger) results.get(8).getValue(),
                (BigInteger) results.get(9).getValue());
    }

    public BigInteger QualificationID() throws ContractException {
        final Function function = new Function(FUNC_QUALIFICATIONID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger QualificationIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_QUALIFICATIONIDLIST,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, String, BigInteger> QualificationsMap(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_QUALIFICATIONSMAP,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue(),
                (String) results.get(8).getValue(),
                (BigInteger) results.get(9).getValue());
    }

    public BigInteger RegulatorID() throws ContractException {
        final Function function = new Function(FUNC_REGULATORID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger RegulatorIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_REGULATORIDLIST,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple4<BigInteger, String, String, BigInteger> RegulatorsMap(String param0) throws ContractException {
        final Function function = new Function(FUNC_REGULATORSMAP,
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<BigInteger, String, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue());
    }

    public BigInteger SIGNIN_CREDIT() throws ContractException {
        final Function function = new Function(FUNC_SIGNIN_CREDIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger TOTAL_EMISSION() throws ContractException {
        final Function function = new Function(FUNC_TOTAL_EMISSION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger TransactionID() throws ContractException {
        final Function function = new Function(FUNC_TRANSACTIONID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger TransactionIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_TRANSACTIONIDLIST,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple8<BigInteger, BigInteger, BigInteger, String, String, String, BigInteger, BigInteger> TransactionsMap(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_TRANSACTIONSMAP,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, BigInteger, BigInteger, String, String, String, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue());
    }

    public TransactionReceipt buyEmissionLimit(String _enterpriseSeller, BigInteger _eassetId, BigInteger _quantity) {
        final Function function = new Function(
                FUNC_BUYEMISSIONLIMIT,
                Arrays.<Type>asList(new Address(_enterpriseSeller),
                new Uint256(_eassetId),
                new Uint256(_quantity)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] buyEmissionLimit(String _enterpriseSeller, BigInteger _eassetId, BigInteger _quantity, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUYEMISSIONLIMIT,
                Arrays.<Type>asList(new Address(_enterpriseSeller),
                new Uint256(_eassetId),
                new Uint256(_quantity)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuyEmissionLimit(String _enterpriseSeller, BigInteger _eassetId, BigInteger _quantity) {
        final Function function = new Function(
                FUNC_BUYEMISSIONLIMIT,
                Arrays.<Type>asList(new Address(_enterpriseSeller),
                new Uint256(_eassetId),
                new Uint256(_quantity)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getBuyEmissionLimitInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUYEMISSIONLIMIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple2<BigInteger, Transaction> getBuyEmissionLimitOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BUYEMISSIONLIMIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Transaction>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Transaction>(

                (BigInteger) results.get(0).getValue(),
                (Transaction) results.get(1)
                );
    }

    public TransactionReceipt byCreditsExchangedEmission(String _enterpriseAddr, BigInteger _credits) {
        final Function function = new Function(
                FUNC_BYCREDITSEXCHANGEDEMISSION,
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_credits)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] byCreditsExchangedEmission(String _enterpriseAddr, BigInteger _credits, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BYCREDITSEXCHANGEDEMISSION,
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_credits)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForByCreditsExchangedEmission(String _enterpriseAddr, BigInteger _credits) {
        final Function function = new Function(
                FUNC_BYCREDITSEXCHANGEDEMISSION,
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_credits)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getByCreditsExchangedEmissionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BYCREDITSEXCHANGEDEMISSION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt enterpriseEmission(String _enterpriseAddr, BigInteger _emmissionid, BigInteger _emissionEmission) {
        final Function function = new Function(
                FUNC_ENTERPRISEEMISSION,
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_emmissionid),
                new Uint256(_emissionEmission)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] enterpriseEmission(String _enterpriseAddr, BigInteger _emmissionid, BigInteger _emissionEmission, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ENTERPRISEEMISSION,
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_emmissionid),
                new Uint256(_emissionEmission)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForEnterpriseEmission(String _enterpriseAddr, BigInteger _emmissionid, BigInteger _emissionEmission) {
        final Function function = new Function(
                FUNC_ENTERPRISEEMISSION,
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_emmissionid),
                new Uint256(_emissionEmission)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getEnterpriseEmissionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ENTERPRISEEMISSION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple3<BigInteger, Boolean, BigInteger> getEnterpriseEmissionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ENTERPRISEEMISSION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, Boolean, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (Boolean) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt initEmissionLimit(BigInteger _qualificationEmissionLimit) {
        final Function function = new Function(
                FUNC_INITEMISSIONLIMIT,
                Arrays.<Type>asList(new Uint256(_qualificationEmissionLimit)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] initEmissionLimit(BigInteger _qualificationEmissionLimit, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INITEMISSIONLIMIT,
                Arrays.<Type>asList(new Uint256(_qualificationEmissionLimit)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInitEmissionLimit(BigInteger _qualificationEmissionLimit) {
        final Function function = new Function(
                FUNC_INITEMISSIONLIMIT,
                Arrays.<Type>asList(new Uint256(_qualificationEmissionLimit)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getInitEmissionLimitInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INITEMISSIONLIMIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt initPointsRewards(List<String> _enterpriseAddressList, BigInteger _credited) {
        final Function function = new Function(
                FUNC_INITPOINTSREWARDS,
                Arrays.<Type>asList(new DynamicArray<Address>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(_enterpriseAddressList, Address.class)),
                new Uint256(_credited)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] initPointsRewards(List<String> _enterpriseAddressList, BigInteger _credited, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INITPOINTSREWARDS,
                Arrays.<Type>asList(new DynamicArray<Address>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(_enterpriseAddressList, Address.class)),
                new Uint256(_credited)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInitPointsRewards(List<String> _enterpriseAddressList, BigInteger _credited) {
        final Function function = new Function(
                FUNC_INITPOINTSREWARDS,
                Arrays.<Type>asList(new DynamicArray<Address>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(_enterpriseAddressList, Address.class)),
                new Uint256(_credited)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<List<String>, BigInteger> getInitPointsRewardsInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INITPOINTSREWARDS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<List<String>, BigInteger>(

                convertToNative((List<Address>) results.get(0).getValue()),
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt queryEmissionResourceByPage(BigInteger page, BigInteger pageSize) {
        final Function function = new Function(
                FUNC_QUERYEMISSIONRESOURCEBYPAGE,
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] queryEmissionResourceByPage(BigInteger page, BigInteger pageSize, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_QUERYEMISSIONRESOURCEBYPAGE,
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForQueryEmissionResourceByPage(BigInteger page, BigInteger pageSize) {
        final Function function = new Function(
                FUNC_QUERYEMISSIONRESOURCEBYPAGE,
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getQueryEmissionResourceByPageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_QUERYEMISSIONRESOURCEBYPAGE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<DynamicArray<EmissionResource>, BigInteger> getQueryEmissionResourceByPageOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_QUERYEMISSIONRESOURCEBYPAGE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<EmissionResource>>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<DynamicArray<EmissionResource>, BigInteger>(

                (DynamicArray<EmissionResource>) results.get(0),
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt queryEnterpriseAssetByPage(BigInteger page, BigInteger pageSize) {
        final Function function = new Function(
                FUNC_QUERYENTERPRISEASSETBYPAGE,
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] queryEnterpriseAssetByPage(BigInteger page, BigInteger pageSize, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_QUERYENTERPRISEASSETBYPAGE,
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForQueryEnterpriseAssetByPage(BigInteger page, BigInteger pageSize) {
        final Function function = new Function(
                FUNC_QUERYENTERPRISEASSETBYPAGE,
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getQueryEnterpriseAssetByPageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_QUERYENTERPRISEASSETBYPAGE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<DynamicArray<EnterpriseAsset>, BigInteger> getQueryEnterpriseAssetByPageOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_QUERYENTERPRISEASSETBYPAGE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<EnterpriseAsset>>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<DynamicArray<EnterpriseAsset>, BigInteger>(

                (DynamicArray<EnterpriseAsset>) results.get(0),
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt queryTransactionsByPage(BigInteger page, BigInteger pageSize) {
        final Function function = new Function(
                FUNC_QUERYTRANSACTIONSBYPAGE,
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] queryTransactionsByPage(BigInteger page, BigInteger pageSize, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_QUERYTRANSACTIONSBYPAGE,
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForQueryTransactionsByPage(BigInteger page, BigInteger pageSize) {
        final Function function = new Function(
                FUNC_QUERYTRANSACTIONSBYPAGE,
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getQueryTransactionsByPageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_QUERYTRANSACTIONSBYPAGE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<DynamicArray<Transaction>, BigInteger> getQueryTransactionsByPageOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_QUERYTRANSACTIONSBYPAGE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Transaction>>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<DynamicArray<Transaction>, BigInteger>(

                (DynamicArray<Transaction>) results.get(0),
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt registerEnterprise(String _enterpriseAddress, String _enterpriseName) {
        final Function function = new Function(
                FUNC_REGISTERENTERPRISE,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerEnterprise(String _enterpriseAddress, String _enterpriseName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERENTERPRISE,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterEnterprise(String _enterpriseAddress, String _enterpriseName) {
        final Function function = new Function(
                FUNC_REGISTERENTERPRISE,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRegisterEnterpriseInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERENTERPRISE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
                );
    }

    public Tuple2<BigInteger, Enterprise> getRegisterEnterpriseOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERENTERPRISE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Enterprise>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Enterprise>(

                (BigInteger) results.get(0).getValue(),
                (Enterprise) results.get(1)
                );
    }

    public TransactionReceipt registerRegulator(String _regulatorAddress, String _regulatorName) {
        final Function function = new Function(
                FUNC_REGISTERREGULATOR,
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Utf8String(_regulatorName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerRegulator(String _regulatorAddress, String _regulatorName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERREGULATOR,
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Utf8String(_regulatorName)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterRegulator(String _regulatorAddress, String _regulatorName) {
        final Function function = new Function(
                FUNC_REGISTERREGULATOR,
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Utf8String(_regulatorName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRegisterRegulatorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERREGULATOR,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
                );
    }

    public Tuple2<BigInteger, Regulator> getRegisterRegulatorOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERREGULATOR,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Regulator>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Regulator>(

                (BigInteger) results.get(0).getValue(),
                (Regulator) results.get(1)
                );
    }

    public EmissionResource selectEmissionResourceInfo(BigInteger _emmissionid) throws ContractException {
        final Function function = new Function(FUNC_SELECTEMISSIONRESOURCEINFO,
                Arrays.<Type>asList(new Uint256(_emmissionid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<EmissionResource>() {}));
        return executeCallWithSingleValueReturn(function, EmissionResource.class);
    }

    public Enterprise selectEnterpriseInfo(String _enterpriseAddress) throws ContractException {
        final Function function = new Function(FUNC_SELECTENTERPRISEINFO,
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Enterprise>() {}));
        return executeCallWithSingleValueReturn(function, Enterprise.class);
    }

    public TransactionReceipt selectQualificationInfo(String _enterpriseAddress) {
        final Function function = new Function(
                FUNC_SELECTQUALIFICATIONINFO,
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] selectQualificationInfo(String _enterpriseAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECTQUALIFICATIONINFO,
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelectQualificationInfo(String _enterpriseAddress) {
        final Function function = new Function(
                FUNC_SELECTQUALIFICATIONINFO,
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSelectQualificationInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECTQUALIFICATIONINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, Qualification> getSelectQualificationInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECTQUALIFICATIONINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Qualification>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Qualification>(

                (BigInteger) results.get(0).getValue(),
                (Qualification) results.get(1)
                );
    }

    public EnterpriseAsset selectSellerAssetInfo(BigInteger _eassetId) throws ContractException {
        final Function function = new Function(FUNC_SELECTSELLERASSETINFO,
                Arrays.<Type>asList(new Uint256(_eassetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<EnterpriseAsset>() {}));
        return executeCallWithSingleValueReturn(function, EnterpriseAsset.class);
    }

    public Transaction selectTransactionInfo(BigInteger _transactionId) throws ContractException {
        final Function function = new Function(FUNC_SELECTTRANSACTIONINFO,
                Arrays.<Type>asList(new Uint256(_transactionId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Transaction>() {}));
        return executeCallWithSingleValueReturn(function, Transaction.class);
    }

    public Tuple2<BigInteger, String> selectUserAddress(BigInteger _enterpriseID) throws ContractException {
        final Function function = new Function(FUNC_SELECTUSERADDRESS,
                Arrays.<Type>asList(new Uint256(_enterpriseID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, String>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue());
    }

    public TransactionReceipt sellEmissionLimit(BigInteger _emissionLimitCount, BigInteger _amount) {
        final Function function = new Function(
                FUNC_SELLEMISSIONLIMIT,
                Arrays.<Type>asList(new Uint256(_emissionLimitCount),
                new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] sellEmissionLimit(BigInteger _emissionLimitCount, BigInteger _amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELLEMISSIONLIMIT,
                Arrays.<Type>asList(new Uint256(_emissionLimitCount),
                new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSellEmissionLimit(BigInteger _emissionLimitCount, BigInteger _amount) {
        final Function function = new Function(
                FUNC_SELLEMISSIONLIMIT,
                Arrays.<Type>asList(new Uint256(_emissionLimitCount),
                new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getSellEmissionLimitInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELLEMISSIONLIMIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<BigInteger, EnterpriseAsset> getSellEmissionLimitOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELLEMISSIONLIMIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<EnterpriseAsset>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, EnterpriseAsset>(

                (BigInteger) results.get(0).getValue(),
                (EnterpriseAsset) results.get(1)
                );
    }

    public TransactionReceipt signIn(String _enterpriseAddress) {
        final Function function = new Function(
                FUNC_SIGNIN,
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] signIn(String _enterpriseAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SIGNIN,
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSignIn(String _enterpriseAddress) {
        final Function function = new Function(
                FUNC_SIGNIN,
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSignInInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SIGNIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, BigInteger> getSignInOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SIGNIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt subEnterpriseCredit(BigInteger _credit) {
        final Function function = new Function(
                FUNC_SUBENTERPRISECREDIT,
                Arrays.<Type>asList(new Uint256(_credit)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] subEnterpriseCredit(BigInteger _credit, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SUBENTERPRISECREDIT,
                Arrays.<Type>asList(new Uint256(_credit)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSubEnterpriseCredit(BigInteger _credit) {
        final Function function = new Function(
                FUNC_SUBENTERPRISECREDIT,
                Arrays.<Type>asList(new Uint256(_credit)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSubEnterpriseCreditInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SUBENTERPRISECREDIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateBalance(BigInteger _amount) {
        final Function function = new Function(
                FUNC_UPDATEBALANCE,
                Arrays.<Type>asList(new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateBalance(BigInteger _amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEBALANCE,
                Arrays.<Type>asList(new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateBalance(BigInteger _amount) {
        final Function function = new Function(
                FUNC_UPDATEBALANCE,
                Arrays.<Type>asList(new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getUpdateBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateEmissionAsset(BigInteger _emissionId, BigInteger _emissionLimitCount, BigInteger _amount) {
        final Function function = new Function(
                FUNC_UPDATEEMISSIONASSET,
                Arrays.<Type>asList(new Uint256(_emissionId),
                new Uint256(_emissionLimitCount),
                new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateEmissionAsset(BigInteger _emissionId, BigInteger _emissionLimitCount, BigInteger _amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEEMISSIONASSET,
                Arrays.<Type>asList(new Uint256(_emissionId),
                new Uint256(_emissionLimitCount),
                new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateEmissionAsset(BigInteger _emissionId, BigInteger _emissionLimitCount, BigInteger _amount) {
        final Function function = new Function(
                FUNC_UPDATEEMISSIONASSET,
                Arrays.<Type>asList(new Uint256(_emissionId),
                new Uint256(_emissionLimitCount),
                new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getUpdateEmissionAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEEMISSIONASSET,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateEmissionAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEEMISSIONASSET,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateEnterprise(String _enterpriseAddress, String _enterpriseName) {
        final Function function = new Function(
                FUNC_UPDATEENTERPRISE,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateEnterprise(String _enterpriseAddress, String _enterpriseName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEENTERPRISE,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateEnterprise(String _enterpriseAddress, String _enterpriseName) {
        final Function function = new Function(
                FUNC_UPDATEENTERPRISE,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getUpdateEnterpriseInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEENTERPRISE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt updateEnterpriseEmission(BigInteger _emmissionsCount) {
        final Function function = new Function(
                FUNC_UPDATEENTERPRISEEMISSION,
                Arrays.<Type>asList(new Uint256(_emmissionsCount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateEnterpriseEmission(BigInteger _emmissionsCount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEENTERPRISEEMISSION,
                Arrays.<Type>asList(new Uint256(_emmissionsCount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateEnterpriseEmission(BigInteger _emmissionsCount) {
        final Function function = new Function(
                FUNC_UPDATEENTERPRISEEMISSION,
                Arrays.<Type>asList(new Uint256(_emmissionsCount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getUpdateEnterpriseEmissionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEENTERPRISEEMISSION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, BigInteger> getUpdateEnterpriseEmissionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEENTERPRISEEMISSION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt uploadEnterpriseEmission(String _enterpriseAddr, BigInteger _emissionEmission, String _description, String _emissionWay) {
        final Function function = new Function(
                FUNC_UPLOADENTERPRISEEMISSION,
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_emissionEmission),
                new Utf8String(_description),
                new Utf8String(_emissionWay)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] uploadEnterpriseEmission(String _enterpriseAddr, BigInteger _emissionEmission, String _description, String _emissionWay, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPLOADENTERPRISEEMISSION,
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_emissionEmission),
                new Utf8String(_description),
                new Utf8String(_emissionWay)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUploadEnterpriseEmission(String _enterpriseAddr, BigInteger _emissionEmission, String _description, String _emissionWay) {
        final Function function = new Function(
                FUNC_UPLOADENTERPRISEEMISSION,
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_emissionEmission),
                new Utf8String(_description),
                new Utf8String(_emissionWay)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, String, String> getUploadEnterpriseEmissionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPLOADENTERPRISEEMISSION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, String, String>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue()
                );
    }

    public Tuple2<BigInteger, EmissionResource> getUploadEnterpriseEmissionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPLOADENTERPRISEEMISSION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<EmissionResource>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, EmissionResource>(

                (BigInteger) results.get(0).getValue(),
                (EmissionResource) results.get(1)
                );
    }

    public TransactionReceipt uploadQualification(String _enterpriseAddress, String _qualificationName, String _qualificationContent, String _qualificationLeader, String _qualificationIndustry, String _qualificationUserName) {
        final Function function = new Function(
                FUNC_UPLOADQUALIFICATION,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_qualificationName),
                new Utf8String(_qualificationContent),
                new Utf8String(_qualificationLeader),
                new Utf8String(_qualificationIndustry),
                new Utf8String(_qualificationUserName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] uploadQualification(String _enterpriseAddress, String _qualificationName, String _qualificationContent, String _qualificationLeader, String _qualificationIndustry, String _qualificationUserName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPLOADQUALIFICATION,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_qualificationName),
                new Utf8String(_qualificationContent),
                new Utf8String(_qualificationLeader),
                new Utf8String(_qualificationIndustry),
                new Utf8String(_qualificationUserName)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUploadQualification(String _enterpriseAddress, String _qualificationName, String _qualificationContent, String _qualificationLeader, String _qualificationIndustry, String _qualificationUserName) {
        final Function function = new Function(
                FUNC_UPLOADQUALIFICATION,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_qualificationName),
                new Utf8String(_qualificationContent),
                new Utf8String(_qualificationLeader),
                new Utf8String(_qualificationIndustry),
                new Utf8String(_qualificationUserName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, String, String, String, String, String> getUploadQualificationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPLOADQUALIFICATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, String, String, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue()
                );
    }

    public Tuple3<BigInteger, String, Qualification> getUploadQualificationOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPLOADQUALIFICATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Qualification>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, Qualification>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (Qualification) results.get(2)
                );
    }

    public String userIdQueryAddress(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_USERIDQUERYADDRESS,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt verifyEnterpriseEmission(String _regularAddress, String _enterpriseAddr, BigInteger _emmissionid, Boolean _isApprove) {
        final Function function = new Function(
                FUNC_VERIFYENTERPRISEEMISSION,
                Arrays.<Type>asList(new Address(_regularAddress),
                new Address(_enterpriseAddr),
                new Uint256(_emmissionid),
                new Bool(_isApprove)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] verifyEnterpriseEmission(String _regularAddress, String _enterpriseAddr, BigInteger _emmissionid, Boolean _isApprove, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VERIFYENTERPRISEEMISSION,
                Arrays.<Type>asList(new Address(_regularAddress),
                new Address(_enterpriseAddr),
                new Uint256(_emmissionid),
                new Bool(_isApprove)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVerifyEnterpriseEmission(String _regularAddress, String _enterpriseAddr, BigInteger _emmissionid, Boolean _isApprove) {
        final Function function = new Function(
                FUNC_VERIFYENTERPRISEEMISSION,
                Arrays.<Type>asList(new Address(_regularAddress),
                new Address(_enterpriseAddr),
                new Uint256(_emmissionid),
                new Bool(_isApprove)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, Boolean> getVerifyEnterpriseEmissionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VERIFYENTERPRISEEMISSION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, Boolean>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (Boolean) results.get(3).getValue()
                );
    }

    public Tuple2<BigInteger, Boolean> getVerifyEnterpriseEmissionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VERIFYENTERPRISEEMISSION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Boolean>(

                (BigInteger) results.get(0).getValue(),
                (Boolean) results.get(1).getValue()
                );
    }

    public TransactionReceipt verifyQualification(String _regulatorAddress, String _enterpriseAddress, Boolean _isApprove) {
        final Function function = new Function(
                FUNC_VERIFYQUALIFICATION,
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Address(_enterpriseAddress),
                new Bool(_isApprove)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] verifyQualification(String _regulatorAddress, String _enterpriseAddress, Boolean _isApprove, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VERIFYQUALIFICATION,
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Address(_enterpriseAddress),
                new Bool(_isApprove)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVerifyQualification(String _regulatorAddress, String _enterpriseAddress, Boolean _isApprove) {
        final Function function = new Function(
                FUNC_VERIFYQUALIFICATION,
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Address(_enterpriseAddress),
                new Bool(_isApprove)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, Boolean> getVerifyQualificationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VERIFYQUALIFICATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, Boolean>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (Boolean) results.get(2).getValue()
                );
    }

    public Tuple2<BigInteger, Qualification> getVerifyQualificationOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VERIFYQUALIFICATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Qualification>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Qualification>(

                (BigInteger) results.get(0).getValue(),
                (Qualification) results.get(1)
                );
    }

    public static CarbonAssetService load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new CarbonAssetService(contractAddress, client, credential);
    }

    public static CarbonAssetService deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(CarbonAssetService.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Transaction extends DynamicStruct {
        public BigInteger transactionId;

        public BigInteger buyerId;

        public BigInteger sellerId;

        public String transactionOrderName;

        public String transactionBuyAddress;

        public String transactionSellAddress;

        public BigInteger transactionTime;

        public BigInteger transactionQuantity;

        public Transaction(Uint256 transactionId, Uint256 buyerId, Uint256 sellerId, Utf8String transactionOrderName, Address transactionBuyAddress, Address transactionSellAddress, Uint256 transactionTime, Uint256 transactionQuantity) {
            super(transactionId,buyerId,sellerId,transactionOrderName,transactionBuyAddress,transactionSellAddress,transactionTime,transactionQuantity);
            this.transactionId = transactionId.getValue();
            this.buyerId = buyerId.getValue();
            this.sellerId = sellerId.getValue();
            this.transactionOrderName = transactionOrderName.getValue();
            this.transactionBuyAddress = transactionBuyAddress.getValue();
            this.transactionSellAddress = transactionSellAddress.getValue();
            this.transactionTime = transactionTime.getValue();
            this.transactionQuantity = transactionQuantity.getValue();
        }

        public Transaction(BigInteger transactionId, BigInteger buyerId, BigInteger sellerId, String transactionOrderName, String transactionBuyAddress, String transactionSellAddress, BigInteger transactionTime, BigInteger transactionQuantity) {
            super(new Uint256(transactionId),new Uint256(buyerId),new Uint256(sellerId),new Utf8String(transactionOrderName),new Address(transactionBuyAddress),new Address(transactionSellAddress),new Uint256(transactionTime),new Uint256(transactionQuantity));
            this.transactionId = transactionId;
            this.buyerId = buyerId;
            this.sellerId = sellerId;
            this.transactionOrderName = transactionOrderName;
            this.transactionBuyAddress = transactionBuyAddress;
            this.transactionSellAddress = transactionSellAddress;
            this.transactionTime = transactionTime;
            this.transactionQuantity = transactionQuantity;
        }
    }

    public static class EmissionResource extends DynamicStruct {
        public BigInteger emissionId;

        public BigInteger enterpriseId;

        public String enterpriseAddress;

        public BigInteger emissions;

        public String description;

        public String emissionWay;

        public Boolean isApprove;

        public BigInteger emissionTime;

        public EmissionResource(Uint256 emissionId, Uint256 enterpriseId, Address enterpriseAddress, Uint256 emissions, Utf8String description, Utf8String emissionWay, Bool isApprove, Uint256 emissionTime) {
            super(emissionId,enterpriseId,enterpriseAddress,emissions,description,emissionWay,isApprove,emissionTime);
            this.emissionId = emissionId.getValue();
            this.enterpriseId = enterpriseId.getValue();
            this.enterpriseAddress = enterpriseAddress.getValue();
            this.emissions = emissions.getValue();
            this.description = description.getValue();
            this.emissionWay = emissionWay.getValue();
            this.isApprove = isApprove.getValue();
            this.emissionTime = emissionTime.getValue();
        }

        public EmissionResource(BigInteger emissionId, BigInteger enterpriseId, String enterpriseAddress, BigInteger emissions, String description, String emissionWay, Boolean isApprove, BigInteger emissionTime) {
            super(new Uint256(emissionId),new Uint256(enterpriseId),new Address(enterpriseAddress),new Uint256(emissions),new Utf8String(description),new Utf8String(emissionWay),new Bool(isApprove),new Uint256(emissionTime));
            this.emissionId = emissionId;
            this.enterpriseId = enterpriseId;
            this.enterpriseAddress = enterpriseAddress;
            this.emissions = emissions;
            this.description = description;
            this.emissionWay = emissionWay;
            this.isApprove = isApprove;
            this.emissionTime = emissionTime;
        }
    }

    public static class EnterpriseAsset extends StaticStruct {
        public BigInteger assetId;

        public BigInteger enterpriseId;

        public String enterpriseAddress;

        public BigInteger assetQuantity;

        public BigInteger assetAmount;

        public BigInteger time;

        public BigInteger status;

        public EnterpriseAsset(Uint256 assetId, Uint256 enterpriseId, Address enterpriseAddress, Uint256 assetQuantity, Uint256 assetAmount, Uint256 time, Uint8 status) {
            super(assetId,enterpriseId,enterpriseAddress,assetQuantity,assetAmount,time,status);
            this.assetId = assetId.getValue();
            this.enterpriseId = enterpriseId.getValue();
            this.enterpriseAddress = enterpriseAddress.getValue();
            this.assetQuantity = assetQuantity.getValue();
            this.assetAmount = assetAmount.getValue();
            this.time = time.getValue();
            this.status = status.getValue();
        }

        public EnterpriseAsset(BigInteger assetId, BigInteger enterpriseId, String enterpriseAddress, BigInteger assetQuantity, BigInteger assetAmount, BigInteger time, BigInteger status) {
            super(new Uint256(assetId),new Uint256(enterpriseId),new Address(enterpriseAddress),new Uint256(assetQuantity),new Uint256(assetAmount),new Uint256(time),new Uint8(status));
            this.assetId = assetId;
            this.enterpriseId = enterpriseId;
            this.enterpriseAddress = enterpriseAddress;
            this.assetQuantity = assetQuantity;
            this.assetAmount = assetAmount;
            this.time = time;
            this.status = status;
        }
    }

    public static class Enterprise extends DynamicStruct {
        public BigInteger enterpriseId;

        public String enterpriseAddress;

        public String enterpriseName;

        public BigInteger enterpriseBalance;

        public BigInteger enterpriseTotalEmission;

        public BigInteger enterpriseOverEmission;

        public BigInteger enterpriseCarbonCredits;

        public Boolean enterpriseVerified;

        public BigInteger userType;

        public BigInteger qualificationId;

        public Enterprise(Uint256 enterpriseId, Address enterpriseAddress, Utf8String enterpriseName, Uint256 enterpriseBalance, Uint256 enterpriseTotalEmission, Uint256 enterpriseOverEmission, Uint256 enterpriseCarbonCredits, Bool enterpriseVerified, Uint8 userType, Uint256 qualificationId) {
            super(enterpriseId,enterpriseAddress,enterpriseName,enterpriseBalance,enterpriseTotalEmission,enterpriseOverEmission,enterpriseCarbonCredits,enterpriseVerified,userType,qualificationId);
            this.enterpriseId = enterpriseId.getValue();
            this.enterpriseAddress = enterpriseAddress.getValue();
            this.enterpriseName = enterpriseName.getValue();
            this.enterpriseBalance = enterpriseBalance.getValue();
            this.enterpriseTotalEmission = enterpriseTotalEmission.getValue();
            this.enterpriseOverEmission = enterpriseOverEmission.getValue();
            this.enterpriseCarbonCredits = enterpriseCarbonCredits.getValue();
            this.enterpriseVerified = enterpriseVerified.getValue();
            this.userType = userType.getValue();
            this.qualificationId = qualificationId.getValue();
        }

        public Enterprise(BigInteger enterpriseId, String enterpriseAddress, String enterpriseName, BigInteger enterpriseBalance, BigInteger enterpriseTotalEmission, BigInteger enterpriseOverEmission, BigInteger enterpriseCarbonCredits, Boolean enterpriseVerified, BigInteger userType, BigInteger qualificationId) {
            super(new Uint256(enterpriseId),new Address(enterpriseAddress),new Utf8String(enterpriseName),new Uint256(enterpriseBalance),new Uint256(enterpriseTotalEmission),new Uint256(enterpriseOverEmission),new Uint256(enterpriseCarbonCredits),new Bool(enterpriseVerified),new Uint8(userType),new Uint256(qualificationId));
            this.enterpriseId = enterpriseId;
            this.enterpriseAddress = enterpriseAddress;
            this.enterpriseName = enterpriseName;
            this.enterpriseBalance = enterpriseBalance;
            this.enterpriseTotalEmission = enterpriseTotalEmission;
            this.enterpriseOverEmission = enterpriseOverEmission;
            this.enterpriseCarbonCredits = enterpriseCarbonCredits;
            this.enterpriseVerified = enterpriseVerified;
            this.userType = userType;
            this.qualificationId = qualificationId;
        }
    }

    public static class Regulator extends DynamicStruct {
        public BigInteger regulatorId;

        public String regulatorAddress;

        public String regulatorName;

        public BigInteger userType;

        public Regulator(Uint256 regulatorId, Address regulatorAddress, Utf8String regulatorName, Uint8 userType) {
            super(regulatorId,regulatorAddress,regulatorName,userType);
            this.regulatorId = regulatorId.getValue();
            this.regulatorAddress = regulatorAddress.getValue();
            this.regulatorName = regulatorName.getValue();
            this.userType = userType.getValue();
        }

        public Regulator(BigInteger regulatorId, String regulatorAddress, String regulatorName, BigInteger userType) {
            super(new Uint256(regulatorId),new Address(regulatorAddress),new Utf8String(regulatorName),new Uint8(userType));
            this.regulatorId = regulatorId;
            this.regulatorAddress = regulatorAddress;
            this.regulatorName = regulatorName;
            this.userType = userType;
        }
    }

    public static class Qualification extends DynamicStruct {
        public BigInteger qualificationId;

        public String qualificationName;

        public String qualificationContent;

        public String qualificationLeader;

        public String qualificationIndustry;

        public String qualificationUserName;

        public BigInteger qualificationUploadTime;

        public BigInteger qualificationAuditTime;

        public String qualificationVerifiedRegulator;

        public BigInteger qualificationEmissionLimit;

        public Qualification(Uint256 qualificationId, Utf8String qualificationName, Utf8String qualificationContent, Utf8String qualificationLeader, Utf8String qualificationIndustry, Utf8String qualificationUserName, Uint256 qualificationUploadTime, Uint256 qualificationAuditTime, Address qualificationVerifiedRegulator, Uint256 qualificationEmissionLimit) {
            super(qualificationId,qualificationName,qualificationContent,qualificationLeader,qualificationIndustry,qualificationUserName,qualificationUploadTime,qualificationAuditTime,qualificationVerifiedRegulator,qualificationEmissionLimit);
            this.qualificationId = qualificationId.getValue();
            this.qualificationName = qualificationName.getValue();
            this.qualificationContent = qualificationContent.getValue();
            this.qualificationLeader = qualificationLeader.getValue();
            this.qualificationIndustry = qualificationIndustry.getValue();
            this.qualificationUserName = qualificationUserName.getValue();
            this.qualificationUploadTime = qualificationUploadTime.getValue();
            this.qualificationAuditTime = qualificationAuditTime.getValue();
            this.qualificationVerifiedRegulator = qualificationVerifiedRegulator.getValue();
            this.qualificationEmissionLimit = qualificationEmissionLimit.getValue();
        }

        public Qualification(BigInteger qualificationId, String qualificationName, String qualificationContent, String qualificationLeader, String qualificationIndustry, String qualificationUserName, BigInteger qualificationUploadTime, BigInteger qualificationAuditTime, String qualificationVerifiedRegulator, BigInteger qualificationEmissionLimit) {
            super(new Uint256(qualificationId),new Utf8String(qualificationName),new Utf8String(qualificationContent),new Utf8String(qualificationLeader),new Utf8String(qualificationIndustry),new Utf8String(qualificationUserName),new Uint256(qualificationUploadTime),new Uint256(qualificationAuditTime),new Address(qualificationVerifiedRegulator),new Uint256(qualificationEmissionLimit));
            this.qualificationId = qualificationId;
            this.qualificationName = qualificationName;
            this.qualificationContent = qualificationContent;
            this.qualificationLeader = qualificationLeader;
            this.qualificationIndustry = qualificationIndustry;
            this.qualificationUserName = qualificationUserName;
            this.qualificationUploadTime = qualificationUploadTime;
            this.qualificationAuditTime = qualificationAuditTime;
            this.qualificationVerifiedRegulator = qualificationVerifiedRegulator;
            this.qualificationEmissionLimit = qualificationEmissionLimit;
        }
    }

    public static class EnterpriseEmissionEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _emissionEmission;
    }

    public static class SellEmissionLimitEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger _emissionLimitCount;

        public BigInteger _amount;
    }

    public static class TransferEmissionLimitEventResponse {
        public TransactionReceipt.Logs log;

        public String _from;

        public String _to;

        public BigInteger _amount;
    }

    public static class UpdateBalnceEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _amount;
    }

    public static class UpdateEmissionLimitEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _emissionLimit;
    }

    public static class UpdateEnterpriseEmissionEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _totalEmissions;
    }

    public static class UploadEnterpriseEmissionEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _emissionEmission;
    }

    public static class UploadQualificationEventResponse {
        public TransactionReceipt.Logs log;

        public String _acount;

        public byte[] _name;

        public byte[] _content;
    }

    public static class UserRegisteredEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddress;

        public BigInteger _registerTime;
    }

    public static class VerifyEnterpriseEmissionEventResponse {
        public TransactionReceipt.Logs log;

        public String _form;

        public String _to;

        public Boolean _isAppore;
    }

    public static class VerifyQualificationEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _emissionLimit;
    }
}
