package com.ruoyi.carbon.raw;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.StaticStruct;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple10;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class CarbonAssetService extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","","","","6002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561603a5780601f1061600f5761010080835404028352916020019161603a565b820191906000526020600020905b81548152906001019060200180831161601d57829003601f168201915b5050505050815260200160068201548152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009820154815250509050600073ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff1614156161025761ea64925082819450945061610d565b60c892508281945094505b505050915091565b6000600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905081816006016000828254039250508190555081601060008360080154815260200190815260200160002060090160008282540192505081905550505050565b61619f617516565b60136000838152602001908152602001600020610100604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156162cc5780601f106162a1576101008083540402835291602001916162cc565b820191906000526020600020905b8154815290600101906020018083116162af57829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561636e5780601f106163435761010080835404028352916020019161636e565b820191906000526020600020905b81548152906001019060200180831161635157829003601f168201915b505050505081526020016006820160009054906101000a900460ff161515151581526020016007820154815250509050919050565b600d818154811015156163b257fe5b906000526020600020016000915090505481565b60015481565b60055481565b600b818154811015156163e157fe5b906000526020600020016000915090505481565b60006163ff6175f4565b60008060008060008060009550600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209450600f60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020935060106000866008015481526020019081526020016000209250601460008b8152602001908152602001600020915060126000600354815260200190815260200160002090508160040154890285600301541015616686576201117295508581806101006040519081016040529081600082015481526020016001820154815260200160028201548152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156165b25780601f10616587576101008083540402835291602001916165b2565b820191906000526020600020905b81548152906001019060200180831161659557829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152602001600782015481525050905097509750616c2f565b6000826003015414156168525760008260060160006101000a81548160ff021916908360ff1602179055506201117495508581806101006040519081016040529081600082015481526020016001820154815260200160028201548152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561677e5780601f106167535761010080835404028352916020019161677e565b820191906000526020600020905b81548152906001019060200180831161676157829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152602001600782015481525050905097509750616c2f565b888360090160008282540192505081905550888260030160008282540392505081905550816004015489028560030160008282540392505081905550816004015489028460030160008282540192505081905550600354816000018190555084600001548160010181905550836000015481600201819055506040805190810160405280600f81526020017fe7a2b3e9a29de5baa6e4baa4e698930000000000000000000000000000000000815250816003019080519060200190616918929190617574565b508460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160060181905550888160070181905550600b6003549080600181540180825580915050906001820390600052602060002001600090919290919091505550600360008154809291906001019190505550883373ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167f3009ed8ad77340994eae5aa07e992c4dc4ead947eb9b4f5ce5ac9e7162ffeffc60405160405180910390a460c895508581806101006040519081016040529081600082015481526020016001820154815260200160028201548152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015616b5f5780601f10616b3457610100808354040283529160200191616b5f565b820191906000526020600020905b815481529060010190602001808311616b4257829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820154815250509050975097505b505050505050935093915050565b60116020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015616d155780601f10616cea57610100808354040283529160200191616d15565b820191906000526020600020905b815481529060010190602001808311616cf857829003601f168201915b5050505050908060030160009054906101000a900460ff16905084565b6000616d3c617736565b60008060009150601160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561701857600960025490806001815401808255809150509060018203906000526020600020016000909192909190915055506002548160000181905550858160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084816002019080519060200190616e71929190617574565b5060028160030160006101000a81548160ff021916908360ff1602179055506002600081548092919060010191905055507fe29d35093005f4d575e1003753426b57a7f64378ba73332eef9c6ccc2b8decd68642604051616ed39291906185e3565b60405180910390a160c8915081818060806040519081016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015616fe75780601f10616fbc5761010080835404028352916020","","85aa565b506040830151617fcc6040860182617cbb565b506060830151617fdf60608601826185aa565b5060808301518482036080860152617ff78282617e55565b91505060a083015184820360a08601526180118282617e55565b91505060c083015161802660c0860182617e01565b5060e083015161803960e08601826185aa565b508091505092915050565b60006101008301600083015161805d60008601826185aa565b50602083015161807060208601826185aa565b5060408301516180836040860182617cbb565b50606083015161809660608601826185aa565b50608083015184820360808601526180ae8282617e55565b91505060a083015184820360a08601526180c88282617e55565b91505060c08301516180dd60c0860182617e01565b5060e08301516180f060e08601826185aa565b508091505092915050565b60e08201600082015161811160008501826185aa565b50602082015161812460208501826185aa565b5060408201516181376040850182617cbb565b50606082015161814a60608501826185aa565b50608082015161815d60808501826185aa565b5060a082015161817060a08501826185aa565b5060c082015161818360c08501826185b9565b50505050565b60e08201600082015161819f60008501826185aa565b5060208201516181b260208501826185aa565b5060408201516181c56040850182617cbb565b5060608201516181d860608501826185aa565b5060808201516181eb60808501826185aa565b5060a08201516181fe60a08501826185aa565b5060c082015161821160c08501826185b9565b50505050565b60006101408301600083015161823060008601826185aa565b5060208301516182436020860182617cbb565b506040830151848203604086015261825b8282617e55565b915050606083015161827060608601826185aa565b50608083015161828360808601826185aa565b5060a083015161829660a08601826185aa565b5060c08301516182a960c08601826185aa565b5060e08301516182bc60e0860182617e01565b506101008301516182d16101008601826185b9565b506101208301516182e66101208601826185aa565b508091505092915050565b60006101408301600083015161830a60008601826185aa565b50602083015184820360208601526183228282617e55565b9150506040830151848203604086015261833c8282617e55565b915050606083015184820360608601526183568282617e55565b915050608083015184820360808601526183708282617e55565b91505060a083015184820360a086015261838a8282617e55565b91505060c083015161839f60c08601826185aa565b5060e08301516183b260e08601826185aa565b506101008301516183c7610100860182617cbb565b506101208301516183dc6101208601826185aa565b508091505092915050565b60006080830160008301516183ff60008601826185aa565b5060208301516184126020860182617cbb565b506040830151848203604086015261842a8282617e55565b915050606083015161843f60608601826185b9565b508091505092915050565b60006101008301600083015161846360008601826185aa565b50602083015161847660208601826185aa565b50604083015161848960408601826185aa565b50606083015184820360608601526184a18282617e55565b91505060808301516184b66080860182617cbb565b5060a08301516184c960a0860182617cbb565b5060c08301516184dc60c08601826185aa565b5060e08301516184ef60e08601826185aa565b508091505092915050565b60006101008301600083015161851360008601826185aa565b50602083015161852660208601826185aa565b50604083015161853960408601826185aa565b50606083015184820360608601526185518282617e55565b91505060808301516185666080860182617cbb565b5060a083015161857960a0860182617cbb565b5060c083015161858c60c08601826185aa565b5060e083015161859f60e08601826185aa565b508091505092915050565b6185b381618dfc565b82525050565b6185c281618e06565b82525050565b60006020820190506185dd6000830184617cbb565b92915050565b60006040820190506185f86000830185617cbb565b61860560208301846185aa565b9392505050565b600060408201905081810360008301526186268185617cca565b905061863560208301846185aa565b9392505050565b600060408201905081810360008301526186568185617d38565b905061866560208301846185aa565b9392505050565b600060408201905081810360008301526186868185617d93565b905061869560208301846185aa565b9392505050565b60006040820190506186b16000830185617e10565b6186be6020830184617cbb565b9392505050565b60006040820190506186da6000830185617e10565b6186e76020830184617e01565b9392505050565b60006060820190506187036000830186617e10565b81810360208301526187158185617e1f565b9050818103604083015261872981846182f1565b9050949350505050565b60006040820190506187486000830185617e10565b818103602083015261875a8184617f8d565b90509392505050565b6000610100820190506187796000830185617e10565b61878660208301846180fb565b9392505050565b60006040820190506187a26000830185617e10565b81810360208301526187b48184618217565b90509392505050565b60006040820190506187d26000830185617e10565b81810360208301526187e481846182f1565b90509392505050565b60006040820190506188026000830185617e10565b818103602083015261881481846183e7565b90509392505050565b60006040820190506188326000830185617e10565b8181036020830152618844818461844a565b90509392505050565b60006040820190506188626000830185617e10565b61886f60208301846185aa565b9392505050565b6000602082019050818103600083015261888f81617e8b565b9050919050565b600060208201905081810360008301526188af81617ec2565b9050919050565b600060208201905081810360008301526188cf81617ef9565b9050919050565b600060208201905081810360008301526188ef81617f56565b9050919050565b600060208201905081810360008301526189108184617f8d565b905092915050565b600060e08201905061892d60008301846180fb565b92915050565b6000602082019050818103600083015261894d8184618217565b905092915050565b6000602082019050818103600083015261896f818461844a565b905092915050565b600060208201905061898c60008301846185aa565b92915050565b6000610140820190506189a8600083018d6185aa565b6189b5602083018c617cbb565b81810360408301526189c7818b617e55565b90506189d6606083018a6185aa565b6189e360808301896185aa565b6189f060a08301886185aa565b6189fd60c08301876185aa565b618a0a60e0830186617e01565b618a186101008301856185b9565b618a266101208301846185aa565b9b9a5050505050505050505050565b6000608082019050618a4a60008301876185aa565b618a576020830186617cbb565b8181036040830152618a698185617e55565b9050618a7860608301846185b9565b95945050505050565b600061014082019050618a97600083018d6185aa565b8181036020830152618aa9818c617e55565b90508181036040830152618abd818b617e55565b90508181036060830152618ad1818a617e55565b90508181036080830152618ae58189617e55565b905081810360a0830152618af98188617e55565b9050618b0860c08301876185aa565b618b1560e08301866185aa565b618b23610100830185617cbb565b618b316101208301846185aa565b9b9a5050505050505050505050565b600061010082019050618b56600083018b6185aa565b618b63602083018a6185aa565b618b706040830189617cbb565b618b7d60608301886185aa565b8181036080830152618b8f8187617e55565b905081810360a0830152618ba38186617e55565b9050618bb260c0830185617e01565b618bbf60e08301846185aa565b9998505050505050505050565b600060e082019050618be1600083018a6185aa565b618bee60208301896185aa565b618bfb6040830188617cbb565b618c0860608301876185aa565b618c1560808301866185aa565b618c2260a08301856185aa565b618c2f60c08301846185b9565b98975050505050505050565b600061010082019050618c51600083018b6185aa565b618c5e602083018a6185aa565b618c6b60408301896185aa565b8181036060830152618c7d8188617e55565b9050618c8c6080830187617cbb565b618c9960a0830186617cbb565b618ca660c08301856185aa565b618cb360e08301846185aa565b9998505050505050505050565b6000604051905081810181811067ffffffffffffffff82111715618ce357600080fd5b8060405250919050565b600067ffffffffffffffff821115618d0457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115618d2c57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015618e76578082015181840152602081019050618e5b565b83811115618e85576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820bd225be08062d81b1259aeb3c0da8c41045e32f3c291400ae973fb7d747f08b76c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_emissionLimitCount\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellEmissionLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"name\":\"assetQuantity\",\"type\":\"uint256\"},{\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_enterpriseAddress\",\"type\":\"address\"}],\"name\":\"selectEnterpriseInfo\",\"outputs\":[{\"components\":[{\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"name\":\"enterpriseName\",\"type\":\"string\"},{\"name\":\"enterpriseBalance\",\"type\":\"uint256\"},{\"name\":\"enterpriseTotalEmission\",\"type\":\"uint256\"},{\"name\":\"enterpriseOverEmission\",\"type\":\"uint256\"},{\"name\":\"enterpriseCarbonCredits\",\"type\":\"uint256\"},{\"name\":\"enterpriseVerified\",\"type\":\"bool\"},{\"name\":\"userType\",\"type\":\"uint8\"},{\"name\":\"qualificationId\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_regulatorAddress\",\"type\":\"address\"},{\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"name\":\"_isApprove\",\"type\":\"bool\"}],\"name\":\"verifyQualification\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"name\":\"qualificationId\",\"type\":\"uint256\"},{\"name\":\"qualificationName\",\"type\":\"string\"},{\"name\":\"qualificationContent\",\"type\":\"string\"},{\"name\":\"qualificationLeader\",\"type\":\"string\"},{\"name\":\"qualificationIndustry\",\"type\":\"string\"},{\"name\":\"qualificationUserName\",\"type\":\"string\"},{\"name\":\"qualificationUploadTime\",\"type\":\"uint256\"},{\"name\":\"qualificationAuditTime\",\"type\":\"uint256\"},{\"name\":\"qualificationVerifiedRegulator\",\"type\":\"address\"},{\"name\":\"qualificationEmissionLimit\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_enterpriseID\",\"type\":\"uint256\"}],\"name\":\"selectUserAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"QualificationsMap\",\"outputs\":[{\"name\":\"qualificationId\",\"type\":\"uint256\"},{\"name\":\"qualificationName\",\"type\":\"string\"},{\"name\":\"qualificationContent\",\"type\":\"string\"},{\"name\":\"qualificationLeader\",\"type\":\"string\"},{\"name\":\"qualificationIndustry\",\"type\":\"string\"},{\"name\":\"qualificationUserName\",\"type\":\"string\"},{\"name\":\"qualificationUploadTime\",\"type\":\"uint256\"},{\"name\":\"qualificationAuditTime\",\"type\":\"uint256\"},{\"name\":\"qualificationVerifiedRegulator\",\"type\":\"address\"},{\"name\":\"qualificationEmissionLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"page\",\"type\":\"uint256\"},{\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"queryEnterpriseAssetByPage\",\"outputs\":[{\"components\":[{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"name\":\"assetQuantity\",\"type\":\"uint256\"},{\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"\",\"type\":\"tuple[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"name\":\"_emissionEmission\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_emissionWay\",\"type\":\"string\"}],\"name\":\"uploadEnterpriseEmission\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"name\":\"emissionId\",\"type\":\"uint256\"},{\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"name\":\"emissions\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"emissionWay\",\"type\":\"string\"},{\"name\":\"isApprove\",\"type\":\"bool\"},{\"name\":\"emissionTime\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RegulatorID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EmissionResourcesMap\",\"outputs\":[{\"name\":\"emissionId\",\"type\":\"uint256\"},{\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"name\":\"emissions\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"emissionWay\",\"type\":\"string\"},{\"name\":\"isApprove\",\"type\":\"bool\"},{\"name\":\"emissionTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EmissionResourceIDList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"name\":\"_enterpriseName\",\"type\":\"string\"}],\"name\":\"registerEnterprise\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"name\":\"enterpriseName\",\"type\":\"string\"},{\"name\":\"enterpriseBalance\",\"type\":\"uint256\"},{\"name\":\"enterpriseTotalEmission\",\"type\":\"uint256\"},{\"name\":\"enterpriseOverEmission\",\"type\":\"uint256\"},{\"name\":\"enterpriseCarbonCredits\",\"type\":\"uint256\"},{\"name\":\"enterpriseVerified\",\"type\":\"bool\"},{\"name\":\"userType\",\"type\":\"uint8\"},{\"name\":\"qualificationId\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_emmissionsCount\",\"type\":\"uint256\"}],\"name\":\"updateEnterpriseEmission\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RegulatorIDList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"QualificationIDList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_regularAddress\",\"type\":\"address\"},{\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"name\":\"_emmissionid\",\"type\":\"uint256\"},{\"name\":\"_isApprove\",\"type\":\"bool\"}],\"name\":\"verifyEnterpriseEmission\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"selectTransactionInfo\",\"outputs\":[{\"components\":[{\"name\":\"transactionId\",\"type\":\"uint256\"},{\"name\":\"buyerId\",\"type\":\"uint256\"},{\"name\":\"sellerId\",\"type\":\"uint256\"},{\"name\":\"transactionOrderName\",\"type\":\"string\"},{\"name\":\"transactionBuyAddress\",\"type\":\"address\"},{\"name\":\"transactionSellAddress\",\"type\":\"address\"},{\"name\":\"transactionTime\",\"type\":\"uint256\"},{\"name\":\"transactionQuantity\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EnterpriseAssetsMap\",\"outputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"name\":\"assetQuantity\",\"type\":\"uint256\"},{\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_qualificationEmissionLimit\",\"type\":\"uint256\"}],\"name\":\"initEmissionLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"EnterprisesMap\",\"outputs\":[{\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"name\":\"enterpriseName\",\"type\":\"string\"},{\"name\":\"enterpriseBalance\",\"type\":\"u","int256\"},{\"name\":\"enterpriseTotalEmission\",\"type\":\"uint256\"},{\"name\":\"enterpriseOverEmission\",\"type\":\"uint256\"},{\"name\":\"enterpriseCarbonCredits\",\"type\":\"uint256\"},{\"name\":\"enterpriseVerified\",\"type\":\"bool\"},{\"name\":\"userType\",\"type\":\"uint8\"},{\"name\":\"qualificationId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"name\":\"_emmissionid\",\"type\":\"uint256\"},{\"name\":\"_emissionEmission\",\"type\":\"uint256\"}],\"name\":\"enterpriseEmission\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EnterpriseID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enterpriseAddressList\",\"type\":\"address[]\"},{\"name\":\"_credited\",\"type\":\"uint256\"}],\"name\":\"initPointsRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIdQueryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enterpriseAddress\",\"type\":\"address\"}],\"name\":\"signIn\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"page\",\"type\":\"uint256\"},{\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"queryEmissionResourceByPage\",\"outputs\":[{\"components\":[{\"name\":\"emissionId\",\"type\":\"uint256\"},{\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"name\":\"emissions\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"emissionWay\",\"type\":\"string\"},{\"name\":\"isApprove\",\"type\":\"bool\"},{\"name\":\"emissionTime\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EmissionResourceID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TransactionID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SIGNIN_CREDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_EMISSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"name\":\"_qualificationName\",\"type\":\"string\"},{\"name\":\"_qualificationContent\",\"type\":\"string\"},{\"name\":\"_qualificationLeader\",\"type\":\"string\"},{\"name\":\"_qualificationIndustry\",\"type\":\"string\"},{\"name\":\"_qualificationUserName\",\"type\":\"string\"}],\"name\":\"uploadQualification\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"components\":[{\"name\":\"qualificationId\",\"type\":\"uint256\"},{\"name\":\"qualificationName\",\"type\":\"string\"},{\"name\":\"qualificationContent\",\"type\":\"string\"},{\"name\":\"qualificationLeader\",\"type\":\"string\"},{\"name\":\"qualificationIndustry\",\"type\":\"string\"},{\"name\":\"qualificationUserName\",\"type\":\"string\"},{\"name\":\"qualificationUploadTime\",\"type\":\"uint256\"},{\"name\":\"qualificationAuditTime\",\"type\":\"uint256\"},{\"name\":\"qualificationVerifiedRegulator\",\"type\":\"address\"},{\"name\":\"qualificationEmissionLimit\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"page\",\"type\":\"uint256\"},{\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"queryTransactionsByPage\",\"outputs\":[{\"components\":[{\"name\":\"transactionId\",\"type\":\"uint256\"},{\"name\":\"buyerId\",\"type\":\"uint256\"},{\"name\":\"sellerId\",\"type\":\"uint256\"},{\"name\":\"transactionOrderName\",\"type\":\"string\"},{\"name\":\"transactionBuyAddress\",\"type\":\"address\"},{\"name\":\"transactionSellAddress\",\"type\":\"address\"},{\"name\":\"transactionTime\",\"type\":\"uint256\"},{\"name\":\"transactionQuantity\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"name\":\"_enterpriseName\",\"type\":\"string\"}],\"name\":\"updateEnterprise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EnterpriseIDList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enterpriseAddress\",\"type\":\"address\"}],\"name\":\"selectQualificationInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"name\":\"qualificationId\",\"type\":\"uint256\"},{\"name\":\"qualificationName\",\"type\":\"string\"},{\"name\":\"qualificationContent\",\"type\":\"string\"},{\"name\":\"qualificationLeader\",\"type\":\"string\"},{\"name\":\"qualificationIndustry\",\"type\":\"string\"},{\"name\":\"qualificationUserName\",\"type\":\"string\"},{\"name\":\"qualificationUploadTime\",\"type\":\"uint256\"},{\"name\":\"qualificationAuditTime\",\"type\":\"uint256\"},{\"name\":\"qualificationVerifiedRegulator\",\"type\":\"address\"},{\"name\":\"qualificationEmissionLimit\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"name\":\"_credits\",\"type\":\"uint256\"}],\"name\":\"byCreditsExchangedEmission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_emmissionid\",\"type\":\"uint256\"}],\"name\":\"selectEmissionResourceInfo\",\"outputs\":[{\"components\":[{\"name\":\"emissionId\",\"type\":\"uint256\"},{\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"name\":\"emissions\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"emissionWay\",\"type\":\"string\"},{\"name\":\"isApprove\",\"type\":\"bool\"},{\"name\":\"emissionTime\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EnterpriseAssetIDList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"QualificationID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EnterpriseAssetID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TransactionIDList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enterpriseSeller\",\"type\":\"address\"},{\"name\":\"_eassetId\",\"type\":\"uint256\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"buyEmissionLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"name\":\"transactionId\",\"type\":\"uint256\"},{\"name\":\"buyerId\",\"type\":\"uint256\"},{\"name\":\"sellerId\",\"type\":\"uint256\"},{\"name\":\"transactionOrderName\",\"type\":\"string\"},{\"name\":\"transactionBuyAddress\",\"type\":\"address\"},{\"name\":\"transactionSellAddress\",\"type\":\"address\"},{\"name\":\"transactionTime\",\"type\":\"uint256\"},{\"name\":\"transactionQuantity\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"RegulatorsMap\",\"outputs\":[{\"name\":\"regulatorId\",\"type\":\"uint256\"},{\"name\":\"regulatorAddress\",\"type\":\"address\"},{\"name\":\"regulatorName\",\"type\":\"string\"},{\"name\":\"userType\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_regulatorAddress\",\"type\":\"address\"},{","\"name\":\"_regulatorName\",\"type\":\"string\"}],\"name\":\"registerRegulator\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"name\":\"regulatorId\",\"type\":\"uint256\"},{\"name\":\"regulatorAddress\",\"type\":\"address\"},{\"name\":\"regulatorName\",\"type\":\"string\"},{\"name\":\"userType\",\"type\":\"uint8\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TransactionsMap\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"},{\"name\":\"buyerId\",\"type\":\"uint256\"},{\"name\":\"sellerId\",\"type\":\"uint256\"},{\"name\":\"transactionOrderName\",\"type\":\"string\"},{\"name\":\"transactionBuyAddress\",\"type\":\"address\"},{\"name\":\"transactionSellAddress\",\"type\":\"address\"},{\"name\":\"transactionTime\",\"type\":\"uint256\"},{\"name\":\"transactionQuantity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eassetId\",\"type\":\"uint256\"}],\"name\":\"selectSellerAssetInfo\",\"outputs\":[{\"components\":[{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"name\":\"assetQuantity\",\"type\":\"uint256\"},{\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_registerTime\",\"type\":\"uint256\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_acount\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"UploadQualification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_emissionLimit\",\"type\":\"uint256\"}],\"name\":\"VerifyQualification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferEmissionLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_emissionLimitCount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SellEmissionLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UpdateBalnce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_emissionLimit\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_emissionEmission\",\"type\":\"uint256\"}],\"name\":\"UploadEnterpriseEmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_form\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_isAppore\",\"type\":\"bool\"}],\"name\":\"VerifyEnterpriseEmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_totalEmissions\",\"type\":\"uint256\"}],\"name\":\"UpdateEnterpriseEmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_emissionEmission\",\"type\":\"uint256\"}],\"name\":\"EnterpriseEmission\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_SELLEMISSIONLIMIT = "sellEmissionLimit";

    public static final String FUNC_SELECTENTERPRISEINFO = "selectEnterpriseInfo";

    public static final String FUNC_VERIFYQUALIFICATION = "verifyQualification";

    public static final String FUNC_SELECTUSERADDRESS = "selectUserAddress";

    public static final String FUNC_QUALIFICATIONSMAP = "QualificationsMap";

    public static final String FUNC_QUERYENTERPRISEASSETBYPAGE = "queryEnterpriseAssetByPage";

    public static final String FUNC_UPLOADENTERPRISEEMISSION = "uploadEnterpriseEmission";

    public static final String FUNC_REGULATORID = "RegulatorID";

    public static final String FUNC_EMISSIONRESOURCESMAP = "EmissionResourcesMap";

    public static final String FUNC_EMISSIONRESOURCEIDLIST = "EmissionResourceIDList";

    public static final String FUNC_REGISTERENTERPRISE = "registerEnterprise";

    public static final String FUNC_UPDATEENTERPRISEEMISSION = "updateEnterpriseEmission";

    public static final String FUNC_REGULATORIDLIST = "RegulatorIDList";

    public static final String FUNC_QUALIFICATIONIDLIST = "QualificationIDList";

    public static final String FUNC_VERIFYENTERPRISEEMISSION = "verifyEnterpriseEmission";

    public static final String FUNC_SELECTTRANSACTIONINFO = "selectTransactionInfo";

    public static final String FUNC_ENTERPRISEASSETSMAP = "EnterpriseAssetsMap";

    public static final String FUNC_INITEMISSIONLIMIT = "initEmissionLimit";

    public static final String FUNC_ENTERPRISESMAP = "EnterprisesMap";

    public static final String FUNC_ENTERPRISEEMISSION = "enterpriseEmission";

    public static final String FUNC_ENTERPRISEID = "EnterpriseID";

    public static final String FUNC_INITPOINTSREWARDS = "initPointsRewards";

    public static final String FUNC_USERIDQUERYADDRESS = "userIdQueryAddress";

    public static final String FUNC_SIGNIN = "signIn";

    public static final String FUNC_QUERYEMISSIONRESOURCEBYPAGE = "queryEmissionResourceByPage";

    public static final String FUNC_EMISSIONRESOURCEID = "EmissionResourceID";

    public static final String FUNC_TRANSACTIONID = "TransactionID";

    public static final String FUNC_SIGNIN_CREDIT = "SIGNIN_CREDIT";

    public static final String FUNC_TOTAL_EMISSION = "TOTAL_EMISSION";

    public static final String FUNC_UPLOADQUALIFICATION = "uploadQualification";

    public static final String FUNC_QUERYTRANSACTIONSBYPAGE = "queryTransactionsByPage";

    public static final String FUNC_UPDATEENTERPRISE = "updateEnterprise";

    public static final String FUNC_ENTERPRISEIDLIST = "EnterpriseIDList";

    public static final String FUNC_UPDATEBALANCE = "updateBalance";

    public static final String FUNC_SELECTQUALIFICATIONINFO = "selectQualificationInfo";

    public static final String FUNC_BYCREDITSEXCHANGEDEMISSION = "byCreditsExchangedEmission";

    public static final String FUNC_SELECTEMISSIONRESOURCEINFO = "selectEmissionResourceInfo";

    public static final String FUNC_ENTERPRISEASSETIDLIST = "EnterpriseAssetIDList";

    public static final String FUNC_QUALIFICATIONID = "QualificationID";

    public static final String FUNC_ENTERPRISEASSETID = "EnterpriseAssetID";

    public static final String FUNC_TRANSACTIONIDLIST = "TransactionIDList";

    public static final String FUNC_BUYEMISSIONLIMIT = "buyEmissionLimit";

    public static final String FUNC_REGULATORSMAP = "RegulatorsMap";

    public static final String FUNC_REGISTERREGULATOR = "registerRegulator";

    public static final String FUNC_TRANSACTIONSMAP = "TransactionsMap";

    public static final String FUNC_SELECTSELLERASSETINFO = "selectSellerAssetInfo";

    public static final Event USERREGISTERED_EVENT = new Event("UserRegistered", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPLOADQUALIFICATION_EVENT = new Event("UploadQualification", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event VERIFYQUALIFICATION_EVENT = new Event("VerifyQualification", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event TRANSFEREMISSIONLIMIT_EVENT = new Event("TransferEmissionLimit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event SELLEMISSIONLIMIT_EVENT = new Event("SellEmissionLimit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UPDATEBALNCE_EVENT = new Event("UpdateBalnce", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UPDATEEMISSIONLIMIT_EVENT = new Event("UpdateEmissionLimit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UPLOADENTERPRISEEMISSION_EVENT = new Event("UploadEnterpriseEmission", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event VERIFYENTERPRISEEMISSION_EVENT = new Event("VerifyEnterpriseEmission", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>(true) {}));
    ;

    public static final Event UPDATEENTERPRISEEMISSION_EVENT = new Event("UpdateEnterpriseEmission", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event ENTERPRISEEMISSION_EVENT = new Event("EnterpriseEmission", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected CarbonAssetService(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt sellEmissionLimit(BigInteger _emissionLimitCount, BigInteger _amount) {
        final Function function = new Function(
                FUNC_SELLEMISSIONLIMIT, 
                Arrays.<Type>asList(new Uint256(_emissionLimitCount),
                new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] sellEmissionLimit(BigInteger _emissionLimitCount, BigInteger _amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELLEMISSIONLIMIT, 
                Arrays.<Type>asList(new Uint256(_emissionLimitCount),
                new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSellEmissionLimit(BigInteger _emissionLimitCount, BigInteger _amount) {
        final Function function = new Function(
                FUNC_SELLEMISSIONLIMIT, 
                Arrays.<Type>asList(new Uint256(_emissionLimitCount),
                new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getSellEmissionLimitInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELLEMISSIONLIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<BigInteger, Struct0> getSellEmissionLimitOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELLEMISSIONLIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Struct0>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Struct0>(

                (BigInteger) results.get(0).getValue(), 
                (Struct0) results.get(1)
                );
    }

    public Struct1 selectEnterpriseInfo(String _enterpriseAddress) throws ContractException {
        final Function function = new Function(FUNC_SELECTENTERPRISEINFO, 
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct1>() {}));
        return executeCallWithSingleValueReturn(function, Struct1.class);
    }

    public TransactionReceipt verifyQualification(String _regulatorAddress, String _enterpriseAddress, Boolean _isApprove) {
        final Function function = new Function(
                FUNC_VERIFYQUALIFICATION, 
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Address(_enterpriseAddress),
                new Bool(_isApprove)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] verifyQualification(String _regulatorAddress, String _enterpriseAddress, Boolean _isApprove, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VERIFYQUALIFICATION, 
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Address(_enterpriseAddress),
                new Bool(_isApprove)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVerifyQualification(String _regulatorAddress, String _enterpriseAddress, Boolean _isApprove) {
        final Function function = new Function(
                FUNC_VERIFYQUALIFICATION, 
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Address(_enterpriseAddress),
                new Bool(_isApprove)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, Boolean> getVerifyQualificationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VERIFYQUALIFICATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, Boolean>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue()
                );
    }

    public Tuple2<BigInteger, Struct2> getVerifyQualificationOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VERIFYQUALIFICATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Struct2>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Struct2>(

                (BigInteger) results.get(0).getValue(), 
                (Struct2) results.get(1)
                );
    }

    public Tuple2<BigInteger, String> selectUserAddress(BigInteger _enterpriseID) throws ContractException {
        final Function function = new Function(FUNC_SELECTUSERADDRESS, 
                Arrays.<Type>asList(new Uint256(_enterpriseID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, String>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, String, BigInteger> QualificationsMap(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_QUALIFICATIONSMAP, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (String) results.get(8).getValue(), 
                (BigInteger) results.get(9).getValue());
    }

    public TransactionReceipt queryEnterpriseAssetByPage(BigInteger page, BigInteger pageSize) {
        final Function function = new Function(
                FUNC_QUERYENTERPRISEASSETBYPAGE, 
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] queryEnterpriseAssetByPage(BigInteger page, BigInteger pageSize, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_QUERYENTERPRISEASSETBYPAGE, 
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForQueryEnterpriseAssetByPage(BigInteger page, BigInteger pageSize) {
        final Function function = new Function(
                FUNC_QUERYENTERPRISEASSETBYPAGE, 
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getQueryEnterpriseAssetByPageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_QUERYENTERPRISEASSETBYPAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<DynamicArray<Struct0>, BigInteger> getQueryEnterpriseAssetByPageOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_QUERYENTERPRISEASSETBYPAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<DynamicArray<Struct0>, BigInteger>(

                (DynamicArray<Struct0>) results.get(0), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt uploadEnterpriseEmission(String _enterpriseAddr, BigInteger _emissionEmission, String _description, String _emissionWay) {
        final Function function = new Function(
                FUNC_UPLOADENTERPRISEEMISSION, 
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_emissionEmission),
                new Utf8String(_description),
                new Utf8String(_emissionWay)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] uploadEnterpriseEmission(String _enterpriseAddr, BigInteger _emissionEmission, String _description, String _emissionWay, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPLOADENTERPRISEEMISSION, 
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_emissionEmission),
                new Utf8String(_description),
                new Utf8String(_emissionWay)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUploadEnterpriseEmission(String _enterpriseAddr, BigInteger _emissionEmission, String _description, String _emissionWay) {
        final Function function = new Function(
                FUNC_UPLOADENTERPRISEEMISSION, 
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_emissionEmission),
                new Utf8String(_description),
                new Utf8String(_emissionWay)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, String, String> getUploadEnterpriseEmissionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPLOADENTERPRISEEMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, String, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple2<BigInteger, Struct3> getUploadEnterpriseEmissionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPLOADENTERPRISEEMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Struct3>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Struct3>(

                (BigInteger) results.get(0).getValue(), 
                (Struct3) results.get(1)
                );
    }

    public BigInteger RegulatorID() throws ContractException {
        final Function function = new Function(FUNC_REGULATORID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple8<BigInteger, BigInteger, String, BigInteger, String, String, Boolean, BigInteger> EmissionResourcesMap(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_EMISSIONRESOURCESMAP, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, BigInteger, String, BigInteger, String, String, Boolean, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (Boolean) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue());
    }

    public BigInteger EmissionResourceIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_EMISSIONRESOURCEIDLIST, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt registerEnterprise(String _enterpriseAddress, String _enterpriseName) {
        final Function function = new Function(
                FUNC_REGISTERENTERPRISE, 
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerEnterprise(String _enterpriseAddress, String _enterpriseName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERENTERPRISE, 
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterEnterprise(String _enterpriseAddress, String _enterpriseName) {
        final Function function = new Function(
                FUNC_REGISTERENTERPRISE, 
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRegisterEnterpriseInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERENTERPRISE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple2<BigInteger, Struct1> getRegisterEnterpriseOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERENTERPRISE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Struct1>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Struct1>(

                (BigInteger) results.get(0).getValue(), 
                (Struct1) results.get(1)
                );
    }

    public TransactionReceipt updateEnterpriseEmission(BigInteger _emmissionsCount) {
        final Function function = new Function(
                FUNC_UPDATEENTERPRISEEMISSION, 
                Arrays.<Type>asList(new Uint256(_emmissionsCount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateEnterpriseEmission(BigInteger _emmissionsCount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEENTERPRISEEMISSION, 
                Arrays.<Type>asList(new Uint256(_emmissionsCount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateEnterpriseEmission(BigInteger _emmissionsCount) {
        final Function function = new Function(
                FUNC_UPDATEENTERPRISEEMISSION, 
                Arrays.<Type>asList(new Uint256(_emmissionsCount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getUpdateEnterpriseEmissionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEENTERPRISEEMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, BigInteger> getUpdateEnterpriseEmissionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEENTERPRISEEMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger RegulatorIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_REGULATORIDLIST, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger QualificationIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_QUALIFICATIONIDLIST, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt verifyEnterpriseEmission(String _regularAddress, String _enterpriseAddr, BigInteger _emmissionid, Boolean _isApprove) {
        final Function function = new Function(
                FUNC_VERIFYENTERPRISEEMISSION, 
                Arrays.<Type>asList(new Address(_regularAddress),
                new Address(_enterpriseAddr),
                new Uint256(_emmissionid),
                new Bool(_isApprove)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] verifyEnterpriseEmission(String _regularAddress, String _enterpriseAddr, BigInteger _emmissionid, Boolean _isApprove, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VERIFYENTERPRISEEMISSION, 
                Arrays.<Type>asList(new Address(_regularAddress),
                new Address(_enterpriseAddr),
                new Uint256(_emmissionid),
                new Bool(_isApprove)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVerifyEnterpriseEmission(String _regularAddress, String _enterpriseAddr, BigInteger _emmissionid, Boolean _isApprove) {
        final Function function = new Function(
                FUNC_VERIFYENTERPRISEEMISSION, 
                Arrays.<Type>asList(new Address(_regularAddress),
                new Address(_enterpriseAddr),
                new Uint256(_emmissionid),
                new Bool(_isApprove)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, Boolean> getVerifyEnterpriseEmissionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VERIFYENTERPRISEEMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, Boolean>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (Boolean) results.get(3).getValue()
                );
    }

    public Tuple2<BigInteger, Boolean> getVerifyEnterpriseEmissionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VERIFYENTERPRISEEMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Boolean>(

                (BigInteger) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public Struct4 selectTransactionInfo(BigInteger _transactionId) throws ContractException {
        final Function function = new Function(FUNC_SELECTTRANSACTIONINFO, 
                Arrays.<Type>asList(new Uint256(_transactionId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct4>() {}));
        return executeCallWithSingleValueReturn(function, Struct4.class);
    }

    public Tuple7<BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger> EnterpriseAssetsMap(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISEASSETSMAP, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue());
    }

    public TransactionReceipt initEmissionLimit(BigInteger _qualificationEmissionLimit) {
        final Function function = new Function(
                FUNC_INITEMISSIONLIMIT, 
                Arrays.<Type>asList(new Uint256(_qualificationEmissionLimit)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] initEmissionLimit(BigInteger _qualificationEmissionLimit, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INITEMISSIONLIMIT, 
                Arrays.<Type>asList(new Uint256(_qualificationEmissionLimit)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInitEmissionLimit(BigInteger _qualificationEmissionLimit) {
        final Function function = new Function(
                FUNC_INITEMISSIONLIMIT, 
                Arrays.<Type>asList(new Uint256(_qualificationEmissionLimit)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getInitEmissionLimitInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INITEMISSIONLIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple10<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, BigInteger> EnterprisesMap(String param0) throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISESMAP, 
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple10<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (Boolean) results.get(7).getValue(), 
                (BigInteger) results.get(8).getValue(), 
                (BigInteger) results.get(9).getValue());
    }

    public TransactionReceipt enterpriseEmission(String _enterpriseAddr, BigInteger _emmissionid, BigInteger _emissionEmission) {
        final Function function = new Function(
                FUNC_ENTERPRISEEMISSION, 
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_emmissionid),
                new Uint256(_emissionEmission)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] enterpriseEmission(String _enterpriseAddr, BigInteger _emmissionid, BigInteger _emissionEmission, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ENTERPRISEEMISSION, 
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_emmissionid),
                new Uint256(_emissionEmission)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForEnterpriseEmission(String _enterpriseAddr, BigInteger _emmissionid, BigInteger _emissionEmission) {
        final Function function = new Function(
                FUNC_ENTERPRISEEMISSION, 
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_emmissionid),
                new Uint256(_emissionEmission)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getEnterpriseEmissionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ENTERPRISEEMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple2<BigInteger, Boolean> getEnterpriseEmissionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ENTERPRISEEMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Boolean>(

                (BigInteger) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public BigInteger EnterpriseID() throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt initPointsRewards(List<String> _enterpriseAddressList, BigInteger _credited) {
        final Function function = new Function(
                FUNC_INITPOINTSREWARDS, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(_enterpriseAddressList, Address.class)),
                new Uint256(_credited)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] initPointsRewards(List<String> _enterpriseAddressList, BigInteger _credited, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INITPOINTSREWARDS, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(_enterpriseAddressList, Address.class)),
                new Uint256(_credited)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInitPointsRewards(List<String> _enterpriseAddressList, BigInteger _credited) {
        final Function function = new Function(
                FUNC_INITPOINTSREWARDS, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(_enterpriseAddressList, Address.class)),
                new Uint256(_credited)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<List<String>, BigInteger> getInitPointsRewardsInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INITPOINTSREWARDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<List<String>, BigInteger>(

                convertToNative((List<Address>) results.get(0).getValue()), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public String userIdQueryAddress(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_USERIDQUERYADDRESS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt signIn(String _enterpriseAddress) {
        final Function function = new Function(
                FUNC_SIGNIN, 
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] signIn(String _enterpriseAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SIGNIN, 
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSignIn(String _enterpriseAddress) {
        final Function function = new Function(
                FUNC_SIGNIN, 
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSignInInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SIGNIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, BigInteger> getSignInOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SIGNIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt queryEmissionResourceByPage(BigInteger page, BigInteger pageSize) {
        final Function function = new Function(
                FUNC_QUERYEMISSIONRESOURCEBYPAGE, 
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] queryEmissionResourceByPage(BigInteger page, BigInteger pageSize, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_QUERYEMISSIONRESOURCEBYPAGE, 
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForQueryEmissionResourceByPage(BigInteger page, BigInteger pageSize) {
        final Function function = new Function(
                FUNC_QUERYEMISSIONRESOURCEBYPAGE, 
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getQueryEmissionResourceByPageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_QUERYEMISSIONRESOURCEBYPAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<DynamicArray<Struct3>, BigInteger> getQueryEmissionResourceByPageOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_QUERYEMISSIONRESOURCEBYPAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct3>>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<DynamicArray<Struct3>, BigInteger>(

                (DynamicArray<Struct3>) results.get(0), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger EmissionResourceID() throws ContractException {
        final Function function = new Function(FUNC_EMISSIONRESOURCEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger TransactionID() throws ContractException {
        final Function function = new Function(FUNC_TRANSACTIONID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger SIGNIN_CREDIT() throws ContractException {
        final Function function = new Function(FUNC_SIGNIN_CREDIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger TOTAL_EMISSION() throws ContractException {
        final Function function = new Function(FUNC_TOTAL_EMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt uploadQualification(String _enterpriseAddress, String _qualificationName, String _qualificationContent, String _qualificationLeader, String _qualificationIndustry, String _qualificationUserName) {
        final Function function = new Function(
                FUNC_UPLOADQUALIFICATION, 
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_qualificationName),
                new Utf8String(_qualificationContent),
                new Utf8String(_qualificationLeader),
                new Utf8String(_qualificationIndustry),
                new Utf8String(_qualificationUserName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] uploadQualification(String _enterpriseAddress, String _qualificationName, String _qualificationContent, String _qualificationLeader, String _qualificationIndustry, String _qualificationUserName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPLOADQUALIFICATION, 
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_qualificationName),
                new Utf8String(_qualificationContent),
                new Utf8String(_qualificationLeader),
                new Utf8String(_qualificationIndustry),
                new Utf8String(_qualificationUserName)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUploadQualification(String _enterpriseAddress, String _qualificationName, String _qualificationContent, String _qualificationLeader, String _qualificationIndustry, String _qualificationUserName) {
        final Function function = new Function(
                FUNC_UPLOADQUALIFICATION, 
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_qualificationName),
                new Utf8String(_qualificationContent),
                new Utf8String(_qualificationLeader),
                new Utf8String(_qualificationIndustry),
                new Utf8String(_qualificationUserName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, String, String, String, String, String> getUploadQualificationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPLOADQUALIFICATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue()
                );
    }

    public Tuple3<BigInteger, String, Struct2> getUploadQualificationOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPLOADQUALIFICATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Struct2>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, Struct2>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (Struct2) results.get(2)
                );
    }

    public TransactionReceipt queryTransactionsByPage(BigInteger page, BigInteger pageSize) {
        final Function function = new Function(
                FUNC_QUERYTRANSACTIONSBYPAGE, 
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] queryTransactionsByPage(BigInteger page, BigInteger pageSize, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_QUERYTRANSACTIONSBYPAGE, 
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForQueryTransactionsByPage(BigInteger page, BigInteger pageSize) {
        final Function function = new Function(
                FUNC_QUERYTRANSACTIONSBYPAGE, 
                Arrays.<Type>asList(new Uint256(page),
                new Uint256(pageSize)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getQueryTransactionsByPageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_QUERYTRANSACTIONSBYPAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<DynamicArray<Struct4>, BigInteger> getQueryTransactionsByPageOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_QUERYTRANSACTIONSBYPAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct4>>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<DynamicArray<Struct4>, BigInteger>(

                (DynamicArray<Struct4>) results.get(0), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt updateEnterprise(String _enterpriseAddress, String _enterpriseName) {
        final Function function = new Function(
                FUNC_UPDATEENTERPRISE, 
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateEnterprise(String _enterpriseAddress, String _enterpriseName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEENTERPRISE, 
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateEnterprise(String _enterpriseAddress, String _enterpriseName) {
        final Function function = new Function(
                FUNC_UPDATEENTERPRISE, 
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getUpdateEnterpriseInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEENTERPRISE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public BigInteger EnterpriseIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISEIDLIST, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt updateBalance(BigInteger _amount) {
        final Function function = new Function(
                FUNC_UPDATEBALANCE, 
                Arrays.<Type>asList(new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateBalance(BigInteger _amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEBALANCE, 
                Arrays.<Type>asList(new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateBalance(BigInteger _amount) {
        final Function function = new Function(
                FUNC_UPDATEBALANCE, 
                Arrays.<Type>asList(new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getUpdateBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt selectQualificationInfo(String _enterpriseAddress) {
        final Function function = new Function(
                FUNC_SELECTQUALIFICATIONINFO, 
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] selectQualificationInfo(String _enterpriseAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECTQUALIFICATIONINFO, 
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelectQualificationInfo(String _enterpriseAddress) {
        final Function function = new Function(
                FUNC_SELECTQUALIFICATIONINFO, 
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSelectQualificationInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECTQUALIFICATIONINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, Struct2> getSelectQualificationInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECTQUALIFICATIONINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Struct2>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Struct2>(

                (BigInteger) results.get(0).getValue(), 
                (Struct2) results.get(1)
                );
    }

    public TransactionReceipt byCreditsExchangedEmission(String _enterpriseAddr, BigInteger _credits) {
        final Function function = new Function(
                FUNC_BYCREDITSEXCHANGEDEMISSION, 
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_credits)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] byCreditsExchangedEmission(String _enterpriseAddr, BigInteger _credits, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BYCREDITSEXCHANGEDEMISSION, 
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_credits)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForByCreditsExchangedEmission(String _enterpriseAddr, BigInteger _credits) {
        final Function function = new Function(
                FUNC_BYCREDITSEXCHANGEDEMISSION, 
                Arrays.<Type>asList(new Address(_enterpriseAddr),
                new Uint256(_credits)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getByCreditsExchangedEmissionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BYCREDITSEXCHANGEDEMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Struct3 selectEmissionResourceInfo(BigInteger _emmissionid) throws ContractException {
        final Function function = new Function(FUNC_SELECTEMISSIONRESOURCEINFO, 
                Arrays.<Type>asList(new Uint256(_emmissionid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct3>() {}));
        return executeCallWithSingleValueReturn(function, Struct3.class);
    }

    public BigInteger EnterpriseAssetIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISEASSETIDLIST, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger QualificationID() throws ContractException {
        final Function function = new Function(FUNC_QUALIFICATIONID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger EnterpriseAssetID() throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISEASSETID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger TransactionIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_TRANSACTIONIDLIST, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt buyEmissionLimit(String _enterpriseSeller, BigInteger _eassetId, BigInteger _quantity) {
        final Function function = new Function(
                FUNC_BUYEMISSIONLIMIT, 
                Arrays.<Type>asList(new Address(_enterpriseSeller),
                new Uint256(_eassetId),
                new Uint256(_quantity)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] buyEmissionLimit(String _enterpriseSeller, BigInteger _eassetId, BigInteger _quantity, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUYEMISSIONLIMIT, 
                Arrays.<Type>asList(new Address(_enterpriseSeller),
                new Uint256(_eassetId),
                new Uint256(_quantity)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuyEmissionLimit(String _enterpriseSeller, BigInteger _eassetId, BigInteger _quantity) {
        final Function function = new Function(
                FUNC_BUYEMISSIONLIMIT, 
                Arrays.<Type>asList(new Address(_enterpriseSeller),
                new Uint256(_eassetId),
                new Uint256(_quantity)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getBuyEmissionLimitInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUYEMISSIONLIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple2<BigInteger, Struct4> getBuyEmissionLimitOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BUYEMISSIONLIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Struct4>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Struct4>(

                (BigInteger) results.get(0).getValue(), 
                (Struct4) results.get(1)
                );
    }

    public Tuple4<BigInteger, String, String, BigInteger> RegulatorsMap(String param0) throws ContractException {
        final Function function = new Function(FUNC_REGULATORSMAP, 
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<BigInteger, String, String, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue());
    }

    public TransactionReceipt registerRegulator(String _regulatorAddress, String _regulatorName) {
        final Function function = new Function(
                FUNC_REGISTERREGULATOR, 
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Utf8String(_regulatorName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerRegulator(String _regulatorAddress, String _regulatorName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERREGULATOR, 
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Utf8String(_regulatorName)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterRegulator(String _regulatorAddress, String _regulatorName) {
        final Function function = new Function(
                FUNC_REGISTERREGULATOR, 
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Utf8String(_regulatorName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRegisterRegulatorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERREGULATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple2<BigInteger, Struct5> getRegisterRegulatorOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERREGULATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Struct5>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Struct5>(

                (BigInteger) results.get(0).getValue(), 
                (Struct5) results.get(1)
                );
    }

    public Tuple8<BigInteger, BigInteger, BigInteger, String, String, String, BigInteger, BigInteger> TransactionsMap(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_TRANSACTIONSMAP, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, BigInteger, BigInteger, String, String, String, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue());
    }

    public Struct0 selectSellerAssetInfo(BigInteger _eassetId) throws ContractException {
        final Function function = new Function(FUNC_SELECTSELLERASSETINFO, 
                Arrays.<Type>asList(new Uint256(_eassetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public List<UserRegisteredEventResponse> getUserRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(USERREGISTERED_EVENT, transactionReceipt);
        ArrayList<UserRegisteredEventResponse> responses = new ArrayList<UserRegisteredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UserRegisteredEventResponse typedResponse = new UserRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._registerTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUserRegisteredEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(USERREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUserRegisteredEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(USERREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UploadQualificationEventResponse> getUploadQualificationEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPLOADQUALIFICATION_EVENT, transactionReceipt);
        ArrayList<UploadQualificationEventResponse> responses = new ArrayList<UploadQualificationEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UploadQualificationEventResponse typedResponse = new UploadQualificationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._acount = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._name = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._content = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUploadQualificationEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPLOADQUALIFICATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUploadQualificationEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPLOADQUALIFICATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<VerifyQualificationEventResponse> getVerifyQualificationEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYQUALIFICATION_EVENT, transactionReceipt);
        ArrayList<VerifyQualificationEventResponse> responses = new ArrayList<VerifyQualificationEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            VerifyQualificationEventResponse typedResponse = new VerifyQualificationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._emissionLimit = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeVerifyQualificationEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(VERIFYQUALIFICATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeVerifyQualificationEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(VERIFYQUALIFICATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferEmissionLimitEventResponse> getTransferEmissionLimitEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREMISSIONLIMIT_EVENT, transactionReceipt);
        ArrayList<TransferEmissionLimitEventResponse> responses = new ArrayList<TransferEmissionLimitEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEmissionLimitEventResponse typedResponse = new TransferEmissionLimitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._amount = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferEmissionLimitEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferEmissionLimitEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SellEmissionLimitEventResponse> getSellEmissionLimitEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SELLEMISSIONLIMIT_EVENT, transactionReceipt);
        ArrayList<SellEmissionLimitEventResponse> responses = new ArrayList<SellEmissionLimitEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SellEmissionLimitEventResponse typedResponse = new SellEmissionLimitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._emissionLimitCount = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._amount = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSellEmissionLimitEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SELLEMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSellEmissionLimitEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SELLEMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateBalnceEventResponse> getUpdateBalnceEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEBALNCE_EVENT, transactionReceipt);
        ArrayList<UpdateBalnceEventResponse> responses = new ArrayList<UpdateBalnceEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateBalnceEventResponse typedResponse = new UpdateBalnceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._amount = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateBalnceEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEBALNCE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateBalnceEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEBALNCE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateEmissionLimitEventResponse> getUpdateEmissionLimitEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEEMISSIONLIMIT_EVENT, transactionReceipt);
        ArrayList<UpdateEmissionLimitEventResponse> responses = new ArrayList<UpdateEmissionLimitEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateEmissionLimitEventResponse typedResponse = new UpdateEmissionLimitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._emissionLimit = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateEmissionLimitEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEEMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateEmissionLimitEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEEMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UploadEnterpriseEmissionEventResponse> getUploadEnterpriseEmissionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPLOADENTERPRISEEMISSION_EVENT, transactionReceipt);
        ArrayList<UploadEnterpriseEmissionEventResponse> responses = new ArrayList<UploadEnterpriseEmissionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UploadEnterpriseEmissionEventResponse typedResponse = new UploadEnterpriseEmissionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._emissionEmission = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUploadEnterpriseEmissionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPLOADENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUploadEnterpriseEmissionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPLOADENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<VerifyEnterpriseEmissionEventResponse> getVerifyEnterpriseEmissionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYENTERPRISEEMISSION_EVENT, transactionReceipt);
        ArrayList<VerifyEnterpriseEmissionEventResponse> responses = new ArrayList<VerifyEnterpriseEmissionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            VerifyEnterpriseEmissionEventResponse typedResponse = new VerifyEnterpriseEmissionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._form = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._isAppore = (Boolean) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeVerifyEnterpriseEmissionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(VERIFYENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeVerifyEnterpriseEmissionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(VERIFYENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateEnterpriseEmissionEventResponse> getUpdateEnterpriseEmissionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEENTERPRISEEMISSION_EVENT, transactionReceipt);
        ArrayList<UpdateEnterpriseEmissionEventResponse> responses = new ArrayList<UpdateEnterpriseEmissionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateEnterpriseEmissionEventResponse typedResponse = new UpdateEnterpriseEmissionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._totalEmissions = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateEnterpriseEmissionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateEnterpriseEmissionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<EnterpriseEmissionEventResponse> getEnterpriseEmissionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ENTERPRISEEMISSION_EVENT, transactionReceipt);
        ArrayList<EnterpriseEmissionEventResponse> responses = new ArrayList<EnterpriseEmissionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            EnterpriseEmissionEventResponse typedResponse = new EnterpriseEmissionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._emissionEmission = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeEnterpriseEmissionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeEnterpriseEmissionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static CarbonAssetService load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new CarbonAssetService(contractAddress, client, credential);
    }

    public static CarbonAssetService deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(CarbonAssetService.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Struct0 extends StaticStruct {
        public BigInteger assetId;

        public BigInteger enterpriseId;

        public String enterpriseAddress;

        public BigInteger assetQuantity;

        public BigInteger assetAmount;

        public BigInteger time;

        public BigInteger status;

        public Struct0(Uint256 assetId, Uint256 enterpriseId, Address enterpriseAddress, Uint256 assetQuantity, Uint256 assetAmount, Uint256 time, Uint8 status) {
            super(assetId,enterpriseId,enterpriseAddress,assetQuantity,assetAmount,time,status);
            this.assetId = assetId.getValue();
            this.enterpriseId = enterpriseId.getValue();
            this.enterpriseAddress = enterpriseAddress.getValue();
            this.assetQuantity = assetQuantity.getValue();
            this.assetAmount = assetAmount.getValue();
            this.time = time.getValue();
            this.status = status.getValue();
        }

        public Struct0(BigInteger assetId, BigInteger enterpriseId, String enterpriseAddress, BigInteger assetQuantity, BigInteger assetAmount, BigInteger time, BigInteger status) {
            super(new Uint256(assetId),new Uint256(enterpriseId),new Address(enterpriseAddress),new Uint256(assetQuantity),new Uint256(assetAmount),new Uint256(time),new Uint8(status));
            this.assetId = assetId;
            this.enterpriseId = enterpriseId;
            this.enterpriseAddress = enterpriseAddress;
            this.assetQuantity = assetQuantity;
            this.assetAmount = assetAmount;
            this.time = time;
            this.status = status;
        }
    }

    public static class Struct1 extends DynamicStruct {
        public BigInteger enterpriseId;

        public String enterpriseAddress;

        public String enterpriseName;

        public BigInteger enterpriseBalance;

        public BigInteger enterpriseTotalEmission;

        public BigInteger enterpriseOverEmission;

        public BigInteger enterpriseCarbonCredits;

        public Boolean enterpriseVerified;

        public BigInteger userType;

        public BigInteger qualificationId;

        public Struct1(Uint256 enterpriseId, Address enterpriseAddress, Utf8String enterpriseName, Uint256 enterpriseBalance, Uint256 enterpriseTotalEmission, Uint256 enterpriseOverEmission, Uint256 enterpriseCarbonCredits, Bool enterpriseVerified, Uint8 userType, Uint256 qualificationId) {
            super(enterpriseId,enterpriseAddress,enterpriseName,enterpriseBalance,enterpriseTotalEmission,enterpriseOverEmission,enterpriseCarbonCredits,enterpriseVerified,userType,qualificationId);
            this.enterpriseId = enterpriseId.getValue();
            this.enterpriseAddress = enterpriseAddress.getValue();
            this.enterpriseName = enterpriseName.getValue();
            this.enterpriseBalance = enterpriseBalance.getValue();
            this.enterpriseTotalEmission = enterpriseTotalEmission.getValue();
            this.enterpriseOverEmission = enterpriseOverEmission.getValue();
            this.enterpriseCarbonCredits = enterpriseCarbonCredits.getValue();
            this.enterpriseVerified = enterpriseVerified.getValue();
            this.userType = userType.getValue();
            this.qualificationId = qualificationId.getValue();
        }

        public Struct1(BigInteger enterpriseId, String enterpriseAddress, String enterpriseName, BigInteger enterpriseBalance, BigInteger enterpriseTotalEmission, BigInteger enterpriseOverEmission, BigInteger enterpriseCarbonCredits, Boolean enterpriseVerified, BigInteger userType, BigInteger qualificationId) {
            super(new Uint256(enterpriseId),new Address(enterpriseAddress),new Utf8String(enterpriseName),new Uint256(enterpriseBalance),new Uint256(enterpriseTotalEmission),new Uint256(enterpriseOverEmission),new Uint256(enterpriseCarbonCredits),new Bool(enterpriseVerified),new Uint8(userType),new Uint256(qualificationId));
            this.enterpriseId = enterpriseId;
            this.enterpriseAddress = enterpriseAddress;
            this.enterpriseName = enterpriseName;
            this.enterpriseBalance = enterpriseBalance;
            this.enterpriseTotalEmission = enterpriseTotalEmission;
            this.enterpriseOverEmission = enterpriseOverEmission;
            this.enterpriseCarbonCredits = enterpriseCarbonCredits;
            this.enterpriseVerified = enterpriseVerified;
            this.userType = userType;
            this.qualificationId = qualificationId;
        }
    }

    public static class Struct2 extends DynamicStruct {
        public BigInteger qualificationId;

        public String qualificationName;

        public String qualificationContent;

        public String qualificationLeader;

        public String qualificationIndustry;

        public String qualificationUserName;

        public BigInteger qualificationUploadTime;

        public BigInteger qualificationAuditTime;

        public String qualificationVerifiedRegulator;

        public BigInteger qualificationEmissionLimit;

        public Struct2(Uint256 qualificationId, Utf8String qualificationName, Utf8String qualificationContent, Utf8String qualificationLeader, Utf8String qualificationIndustry, Utf8String qualificationUserName, Uint256 qualificationUploadTime, Uint256 qualificationAuditTime, Address qualificationVerifiedRegulator, Uint256 qualificationEmissionLimit) {
            super(qualificationId,qualificationName,qualificationContent,qualificationLeader,qualificationIndustry,qualificationUserName,qualificationUploadTime,qualificationAuditTime,qualificationVerifiedRegulator,qualificationEmissionLimit);
            this.qualificationId = qualificationId.getValue();
            this.qualificationName = qualificationName.getValue();
            this.qualificationContent = qualificationContent.getValue();
            this.qualificationLeader = qualificationLeader.getValue();
            this.qualificationIndustry = qualificationIndustry.getValue();
            this.qualificationUserName = qualificationUserName.getValue();
            this.qualificationUploadTime = qualificationUploadTime.getValue();
            this.qualificationAuditTime = qualificationAuditTime.getValue();
            this.qualificationVerifiedRegulator = qualificationVerifiedRegulator.getValue();
            this.qualificationEmissionLimit = qualificationEmissionLimit.getValue();
        }

        public Struct2(BigInteger qualificationId, String qualificationName, String qualificationContent, String qualificationLeader, String qualificationIndustry, String qualificationUserName, BigInteger qualificationUploadTime, BigInteger qualificationAuditTime, String qualificationVerifiedRegulator, BigInteger qualificationEmissionLimit) {
            super(new Uint256(qualificationId),new Utf8String(qualificationName),new Utf8String(qualificationContent),new Utf8String(qualificationLeader),new Utf8String(qualificationIndustry),new Utf8String(qualificationUserName),new Uint256(qualificationUploadTime),new Uint256(qualificationAuditTime),new Address(qualificationVerifiedRegulator),new Uint256(qualificationEmissionLimit));
            this.qualificationId = qualificationId;
            this.qualificationName = qualificationName;
            this.qualificationContent = qualificationContent;
            this.qualificationLeader = qualificationLeader;
            this.qualificationIndustry = qualificationIndustry;
            this.qualificationUserName = qualificationUserName;
            this.qualificationUploadTime = qualificationUploadTime;
            this.qualificationAuditTime = qualificationAuditTime;
            this.qualificationVerifiedRegulator = qualificationVerifiedRegulator;
            this.qualificationEmissionLimit = qualificationEmissionLimit;
        }
    }

    public static class Struct3 extends DynamicStruct {
        public BigInteger emissionId;

        public BigInteger enterpriseId;

        public String enterpriseAddress;

        public BigInteger emissions;

        public String description;

        public String emissionWay;

        public Boolean isApprove;

        public BigInteger emissionTime;

        public Struct3(Uint256 emissionId, Uint256 enterpriseId, Address enterpriseAddress, Uint256 emissions, Utf8String description, Utf8String emissionWay, Bool isApprove, Uint256 emissionTime) {
            super(emissionId,enterpriseId,enterpriseAddress,emissions,description,emissionWay,isApprove,emissionTime);
            this.emissionId = emissionId.getValue();
            this.enterpriseId = enterpriseId.getValue();
            this.enterpriseAddress = enterpriseAddress.getValue();
            this.emissions = emissions.getValue();
            this.description = description.getValue();
            this.emissionWay = emissionWay.getValue();
            this.isApprove = isApprove.getValue();
            this.emissionTime = emissionTime.getValue();
        }

        public Struct3(BigInteger emissionId, BigInteger enterpriseId, String enterpriseAddress, BigInteger emissions, String description, String emissionWay, Boolean isApprove, BigInteger emissionTime) {
            super(new Uint256(emissionId),new Uint256(enterpriseId),new Address(enterpriseAddress),new Uint256(emissions),new Utf8String(description),new Utf8String(emissionWay),new Bool(isApprove),new Uint256(emissionTime));
            this.emissionId = emissionId;
            this.enterpriseId = enterpriseId;
            this.enterpriseAddress = enterpriseAddress;
            this.emissions = emissions;
            this.description = description;
            this.emissionWay = emissionWay;
            this.isApprove = isApprove;
            this.emissionTime = emissionTime;
        }
    }

    public static class Struct4 extends DynamicStruct {
        public BigInteger transactionId;

        public BigInteger buyerId;

        public BigInteger sellerId;

        public String transactionOrderName;

        public String transactionBuyAddress;

        public String transactionSellAddress;

        public BigInteger transactionTime;

        public BigInteger transactionQuantity;

        public Struct4(Uint256 transactionId, Uint256 buyerId, Uint256 sellerId, Utf8String transactionOrderName, Address transactionBuyAddress, Address transactionSellAddress, Uint256 transactionTime, Uint256 transactionQuantity) {
            super(transactionId,buyerId,sellerId,transactionOrderName,transactionBuyAddress,transactionSellAddress,transactionTime,transactionQuantity);
            this.transactionId = transactionId.getValue();
            this.buyerId = buyerId.getValue();
            this.sellerId = sellerId.getValue();
            this.transactionOrderName = transactionOrderName.getValue();
            this.transactionBuyAddress = transactionBuyAddress.getValue();
            this.transactionSellAddress = transactionSellAddress.getValue();
            this.transactionTime = transactionTime.getValue();
            this.transactionQuantity = transactionQuantity.getValue();
        }

        public Struct4(BigInteger transactionId, BigInteger buyerId, BigInteger sellerId, String transactionOrderName, String transactionBuyAddress, String transactionSellAddress, BigInteger transactionTime, BigInteger transactionQuantity) {
            super(new Uint256(transactionId),new Uint256(buyerId),new Uint256(sellerId),new Utf8String(transactionOrderName),new Address(transactionBuyAddress),new Address(transactionSellAddress),new Uint256(transactionTime),new Uint256(transactionQuantity));
            this.transactionId = transactionId;
            this.buyerId = buyerId;
            this.sellerId = sellerId;
            this.transactionOrderName = transactionOrderName;
            this.transactionBuyAddress = transactionBuyAddress;
            this.transactionSellAddress = transactionSellAddress;
            this.transactionTime = transactionTime;
            this.transactionQuantity = transactionQuantity;
        }
    }

    public static class Struct5 extends DynamicStruct {
        public BigInteger regulatorId;

        public String regulatorAddress;

        public String regulatorName;

        public BigInteger userType;

        public Struct5(Uint256 regulatorId, Address regulatorAddress, Utf8String regulatorName, Uint8 userType) {
            super(regulatorId,regulatorAddress,regulatorName,userType);
            this.regulatorId = regulatorId.getValue();
            this.regulatorAddress = regulatorAddress.getValue();
            this.regulatorName = regulatorName.getValue();
            this.userType = userType.getValue();
        }

        public Struct5(BigInteger regulatorId, String regulatorAddress, String regulatorName, BigInteger userType) {
            super(new Uint256(regulatorId),new Address(regulatorAddress),new Utf8String(regulatorName),new Uint8(userType));
            this.regulatorId = regulatorId;
            this.regulatorAddress = regulatorAddress;
            this.regulatorName = regulatorName;
            this.userType = userType;
        }
    }

    public static class UserRegisteredEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddress;

        public BigInteger _registerTime;
    }

    public static class UploadQualificationEventResponse {
        public TransactionReceipt.Logs log;

        public String _acount;

        public byte[] _name;

        public byte[] _content;
    }

    public static class VerifyQualificationEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _emissionLimit;
    }

    public static class TransferEmissionLimitEventResponse {
        public TransactionReceipt.Logs log;

        public String _from;

        public String _to;

        public BigInteger _amount;
    }

    public static class SellEmissionLimitEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger _emissionLimitCount;

        public BigInteger _amount;
    }

    public static class UpdateBalnceEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _amount;
    }

    public static class UpdateEmissionLimitEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _emissionLimit;
    }

    public static class UploadEnterpriseEmissionEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _emissionEmission;
    }

    public static class VerifyEnterpriseEmissionEventResponse {
        public TransactionReceipt.Logs log;

        public String _form;

        public String _to;

        public Boolean _isAppore;
    }

    public static class UpdateEnterpriseEmissionEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _totalEmissions;
    }

    public static class EnterpriseEmissionEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _emissionEmission;
    }
}
