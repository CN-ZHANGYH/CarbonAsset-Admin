package com.ruoyi.carbon.raw;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple10;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class CarbonUserService extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","","","9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015615022578082015181840152602081019050615007565b83811115615031576000848401525b50505050565b6000601f19601f8301169050919050565b61505181614f96565b811461505c57600080fd5b50565b61506881614fa8565b811461507357600080fd5b50565b61507f81614fde565b811461508a57600080fd5b5056fea2646970667358221220cabe8f649b9eaaf10670f0f0015a64b8a1a06ac84ce597792ccdc487bfc6dfc264736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_emissionEmission\",\"type\":\"uint256\"}],\"name\":\"EnterpriseEmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_emissionLimitCount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SellEmissionLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferEmissionLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UpdateBalnce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_emissionLimit\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_totalEmissions\",\"type\":\"uint256\"}],\"name\":\"UpdateEnterpriseEmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_emissionEmission\",\"type\":\"uint256\"}],\"name\":\"UploadEnterpriseEmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_acount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"UploadQualification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_registerTime\",\"type\":\"uint256\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_form\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_isAppore\",\"type\":\"bool\"}],\"name\":\"VerifyEnterpriseEmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_enterpriseAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_emissionLimit\",\"type\":\"uint256\"}],\"name\":\"VerifyQualification\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EmissionResourceID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EmissionResourceIDList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EmissionResourcesMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"emissionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissions\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"emissionWay\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isApprove\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"emissionTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnterpriseAssetID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EnterpriseAssetIDList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EnterpriseAssetsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnterpriseID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EnterpriseIDList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"EnterprisesMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enterpriseName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseTotalEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseOverEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseCarbonCredits\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enterpriseVerified\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"userType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"qualificationId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QualificationID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"QualificationIDList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"QualificationsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qualificationId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"qualificationName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationContent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationLeader\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationIndustry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationUserName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"qualificationUploadTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualificationAuditTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"qualificationVerifiedRegulator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qualificationEmissionLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RegulatorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RegulatorIDList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RegulatorsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"regulatorId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"regulatorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"regulatorName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"userType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNIN_CREDIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_EMISSION\",\"outputs\":[{\"internal","Type\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TransactionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TransactionIDList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TransactionsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"transactionOrderName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"transactionBuyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transactionSellAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transactionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionQuantity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_enterpriseName\",\"type\":\"string\"}],\"name\":\"registerEnterprise\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enterpriseName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseTotalEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseOverEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseCarbonCredits\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enterpriseVerified\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"userType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"qualificationId\",\"type\":\"uint256\"}],\"internalType\":\"struct Enterprise\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_regulatorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_regulatorName\",\"type\":\"string\"}],\"name\":\"registerRegulator\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"regulatorId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"regulatorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"regulatorName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"userType\",\"type\":\"uint8\"}],\"internalType\":\"struct Regulator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"}],\"name\":\"selectEnterpriseInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"enterpriseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enterpriseName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseTotalEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseOverEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterpriseCarbonCredits\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enterpriseVerified\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"userType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"qualificationId\",\"type\":\"uint256\"}],\"internalType\":\"struct Enterprise\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"}],\"name\":\"selectQualificationInfo\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"qualificationId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"qualificationName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationContent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationLeader\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationIndustry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationUserName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"qualificationUploadTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualificationAuditTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"qualificationVerifiedRegulator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qualificationEmissionLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct Qualification\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enterpriseID\",\"type\":\"uint256\"}],\"name\":\"selectUserAddress\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"}],\"name\":\"signIn\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_enterpriseName\",\"type\":\"string\"}],\"name\":\"updateEnterprise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_qualificationName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_qualificationContent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_qualificationLeader\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_qualificationIndustry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_qualificationUserName\",\"type\":\"string\"}],\"name\":\"uploadQualification\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"qualificationId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"qualificationName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationContent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationLeader\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationIndustry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationUserName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"qualificationUploadTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualificationAuditTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"qualificationVerifiedRegulator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qualificationEmissionLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct Qualification\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIdQueryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_regulatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isApprove\",\"type\":\"bool\"}],\"name\":\"verifyQualification\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"qualificationId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"qualificationName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationContent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationLeader\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qualificationIndustry\",\"type\":\"st","ring\"},{\"internalType\":\"string\",\"name\":\"qualificationUserName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"qualificationUploadTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualificationAuditTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"qualificationVerifiedRegulator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qualificationEmissionLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct Qualification\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_EMISSIONRESOURCEID = "EmissionResourceID";

    public static final String FUNC_EMISSIONRESOURCEIDLIST = "EmissionResourceIDList";

    public static final String FUNC_EMISSIONRESOURCESMAP = "EmissionResourcesMap";

    public static final String FUNC_ENTERPRISEASSETID = "EnterpriseAssetID";

    public static final String FUNC_ENTERPRISEASSETIDLIST = "EnterpriseAssetIDList";

    public static final String FUNC_ENTERPRISEASSETSMAP = "EnterpriseAssetsMap";

    public static final String FUNC_ENTERPRISEID = "EnterpriseID";

    public static final String FUNC_ENTERPRISEIDLIST = "EnterpriseIDList";

    public static final String FUNC_ENTERPRISESMAP = "EnterprisesMap";

    public static final String FUNC_QUALIFICATIONID = "QualificationID";

    public static final String FUNC_QUALIFICATIONIDLIST = "QualificationIDList";

    public static final String FUNC_QUALIFICATIONSMAP = "QualificationsMap";

    public static final String FUNC_REGULATORID = "RegulatorID";

    public static final String FUNC_REGULATORIDLIST = "RegulatorIDList";

    public static final String FUNC_REGULATORSMAP = "RegulatorsMap";

    public static final String FUNC_SIGNIN_CREDIT = "SIGNIN_CREDIT";

    public static final String FUNC_TOTAL_EMISSION = "TOTAL_EMISSION";

    public static final String FUNC_TRANSACTIONID = "TransactionID";

    public static final String FUNC_TRANSACTIONIDLIST = "TransactionIDList";

    public static final String FUNC_TRANSACTIONSMAP = "TransactionsMap";

    public static final String FUNC_REGISTERENTERPRISE = "registerEnterprise";

    public static final String FUNC_REGISTERREGULATOR = "registerRegulator";

    public static final String FUNC_SELECTENTERPRISEINFO = "selectEnterpriseInfo";

    public static final String FUNC_SELECTQUALIFICATIONINFO = "selectQualificationInfo";

    public static final String FUNC_SELECTUSERADDRESS = "selectUserAddress";

    public static final String FUNC_SIGNIN = "signIn";

    public static final String FUNC_UPDATEBALANCE = "updateBalance";

    public static final String FUNC_UPDATEENTERPRISE = "updateEnterprise";

    public static final String FUNC_UPLOADQUALIFICATION = "uploadQualification";

    public static final String FUNC_USERIDQUERYADDRESS = "userIdQueryAddress";

    public static final String FUNC_VERIFYQUALIFICATION = "verifyQualification";

    public static final Event ENTERPRISEEMISSION_EVENT = new Event("EnterpriseEmission",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event SELLEMISSIONLIMIT_EVENT = new Event("SellEmissionLimit",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event TRANSFEREMISSIONLIMIT_EVENT = new Event("TransferEmissionLimit",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UPDATEBALNCE_EVENT = new Event("UpdateBalnce",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UPDATEEMISSIONLIMIT_EVENT = new Event("UpdateEmissionLimit",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UPDATEENTERPRISEEMISSION_EVENT = new Event("UpdateEnterpriseEmission",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UPLOADENTERPRISEEMISSION_EVENT = new Event("UploadEnterpriseEmission",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UPLOADQUALIFICATION_EVENT = new Event("UploadQualification",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event USERREGISTERED_EVENT = new Event("UserRegistered",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VERIFYENTERPRISEEMISSION_EVENT = new Event("VerifyEnterpriseEmission",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>(true) {}));
    ;

    public static final Event VERIFYQUALIFICATION_EVENT = new Event("VerifyQualification",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected CarbonUserService(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<EnterpriseEmissionEventResponse> getEnterpriseEmissionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ENTERPRISEEMISSION_EVENT, transactionReceipt);
        ArrayList<EnterpriseEmissionEventResponse> responses = new ArrayList<EnterpriseEmissionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            EnterpriseEmissionEventResponse typedResponse = new EnterpriseEmissionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._emissionEmission = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeEnterpriseEmissionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeEnterpriseEmissionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SellEmissionLimitEventResponse> getSellEmissionLimitEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SELLEMISSIONLIMIT_EVENT, transactionReceipt);
        ArrayList<SellEmissionLimitEventResponse> responses = new ArrayList<SellEmissionLimitEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SellEmissionLimitEventResponse typedResponse = new SellEmissionLimitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._emissionLimitCount = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._amount = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSellEmissionLimitEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SELLEMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSellEmissionLimitEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SELLEMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferEmissionLimitEventResponse> getTransferEmissionLimitEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREMISSIONLIMIT_EVENT, transactionReceipt);
        ArrayList<TransferEmissionLimitEventResponse> responses = new ArrayList<TransferEmissionLimitEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEmissionLimitEventResponse typedResponse = new TransferEmissionLimitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._amount = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferEmissionLimitEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferEmissionLimitEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateBalnceEventResponse> getUpdateBalnceEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEBALNCE_EVENT, transactionReceipt);
        ArrayList<UpdateBalnceEventResponse> responses = new ArrayList<UpdateBalnceEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateBalnceEventResponse typedResponse = new UpdateBalnceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._amount = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateBalnceEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEBALNCE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateBalnceEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEBALNCE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateEmissionLimitEventResponse> getUpdateEmissionLimitEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEEMISSIONLIMIT_EVENT, transactionReceipt);
        ArrayList<UpdateEmissionLimitEventResponse> responses = new ArrayList<UpdateEmissionLimitEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateEmissionLimitEventResponse typedResponse = new UpdateEmissionLimitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._emissionLimit = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateEmissionLimitEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEEMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateEmissionLimitEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEEMISSIONLIMIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateEnterpriseEmissionEventResponse> getUpdateEnterpriseEmissionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEENTERPRISEEMISSION_EVENT, transactionReceipt);
        ArrayList<UpdateEnterpriseEmissionEventResponse> responses = new ArrayList<UpdateEnterpriseEmissionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateEnterpriseEmissionEventResponse typedResponse = new UpdateEnterpriseEmissionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._totalEmissions = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateEnterpriseEmissionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateEnterpriseEmissionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UploadEnterpriseEmissionEventResponse> getUploadEnterpriseEmissionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPLOADENTERPRISEEMISSION_EVENT, transactionReceipt);
        ArrayList<UploadEnterpriseEmissionEventResponse> responses = new ArrayList<UploadEnterpriseEmissionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UploadEnterpriseEmissionEventResponse typedResponse = new UploadEnterpriseEmissionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._emissionEmission = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUploadEnterpriseEmissionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPLOADENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUploadEnterpriseEmissionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPLOADENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UploadQualificationEventResponse> getUploadQualificationEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPLOADQUALIFICATION_EVENT, transactionReceipt);
        ArrayList<UploadQualificationEventResponse> responses = new ArrayList<UploadQualificationEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UploadQualificationEventResponse typedResponse = new UploadQualificationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._acount = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._name = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._content = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUploadQualificationEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPLOADQUALIFICATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUploadQualificationEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPLOADQUALIFICATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UserRegisteredEventResponse> getUserRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(USERREGISTERED_EVENT, transactionReceipt);
        ArrayList<UserRegisteredEventResponse> responses = new ArrayList<UserRegisteredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UserRegisteredEventResponse typedResponse = new UserRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._registerTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUserRegisteredEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(USERREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUserRegisteredEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(USERREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<VerifyEnterpriseEmissionEventResponse> getVerifyEnterpriseEmissionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYENTERPRISEEMISSION_EVENT, transactionReceipt);
        ArrayList<VerifyEnterpriseEmissionEventResponse> responses = new ArrayList<VerifyEnterpriseEmissionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            VerifyEnterpriseEmissionEventResponse typedResponse = new VerifyEnterpriseEmissionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._form = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._isAppore = (Boolean) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeVerifyEnterpriseEmissionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(VERIFYENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeVerifyEnterpriseEmissionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(VERIFYENTERPRISEEMISSION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<VerifyQualificationEventResponse> getVerifyQualificationEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYQUALIFICATION_EVENT, transactionReceipt);
        ArrayList<VerifyQualificationEventResponse> responses = new ArrayList<VerifyQualificationEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            VerifyQualificationEventResponse typedResponse = new VerifyQualificationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enterpriseAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._emissionLimit = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeVerifyQualificationEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(VERIFYQUALIFICATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeVerifyQualificationEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(VERIFYQUALIFICATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public BigInteger EmissionResourceID() throws ContractException {
        final Function function = new Function(FUNC_EMISSIONRESOURCEID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger EmissionResourceIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_EMISSIONRESOURCEIDLIST,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple8<BigInteger, BigInteger, String, BigInteger, String, String, Boolean, BigInteger> EmissionResourcesMap(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_EMISSIONRESOURCESMAP,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, BigInteger, String, BigInteger, String, String, Boolean, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (Boolean) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue());
    }

    public BigInteger EnterpriseAssetID() throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISEASSETID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger EnterpriseAssetIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISEASSETIDLIST,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple7<BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger> EnterpriseAssetsMap(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISEASSETSMAP,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue(),
                (BigInteger) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue());
    }

    public BigInteger EnterpriseID() throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISEID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger EnterpriseIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISEIDLIST,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple10<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, BigInteger> EnterprisesMap(String param0) throws ContractException {
        final Function function = new Function(FUNC_ENTERPRISESMAP,
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple10<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue(),
                (BigInteger) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue(),
                (Boolean) results.get(7).getValue(),
                (BigInteger) results.get(8).getValue(),
                (BigInteger) results.get(9).getValue());
    }

    public BigInteger QualificationID() throws ContractException {
        final Function function = new Function(FUNC_QUALIFICATIONID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger QualificationIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_QUALIFICATIONIDLIST,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, String, BigInteger> QualificationsMap(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_QUALIFICATIONSMAP,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue(),
                (String) results.get(8).getValue(),
                (BigInteger) results.get(9).getValue());
    }

    public BigInteger RegulatorID() throws ContractException {
        final Function function = new Function(FUNC_REGULATORID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger RegulatorIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_REGULATORIDLIST,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple4<BigInteger, String, String, BigInteger> RegulatorsMap(String param0) throws ContractException {
        final Function function = new Function(FUNC_REGULATORSMAP,
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<BigInteger, String, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue());
    }

    public BigInteger SIGNIN_CREDIT() throws ContractException {
        final Function function = new Function(FUNC_SIGNIN_CREDIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger TOTAL_EMISSION() throws ContractException {
        final Function function = new Function(FUNC_TOTAL_EMISSION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger TransactionID() throws ContractException {
        final Function function = new Function(FUNC_TRANSACTIONID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger TransactionIDList(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_TRANSACTIONIDLIST,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple8<BigInteger, BigInteger, BigInteger, String, String, String, BigInteger, BigInteger> TransactionsMap(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_TRANSACTIONSMAP,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, BigInteger, BigInteger, String, String, String, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue());
    }

    public TransactionReceipt registerEnterprise(String _enterpriseAddress, String _enterpriseName) {
        final Function function = new Function(
                FUNC_REGISTERENTERPRISE,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerEnterprise(String _enterpriseAddress, String _enterpriseName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERENTERPRISE,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterEnterprise(String _enterpriseAddress, String _enterpriseName) {
        final Function function = new Function(
                FUNC_REGISTERENTERPRISE,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRegisterEnterpriseInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERENTERPRISE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
                );
    }

    public Tuple2<BigInteger, Enterprise> getRegisterEnterpriseOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERENTERPRISE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Enterprise>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Enterprise>(

                (BigInteger) results.get(0).getValue(),
                (Enterprise) results.get(1)
                );
    }

    public TransactionReceipt registerRegulator(String _regulatorAddress, String _regulatorName) {
        final Function function = new Function(
                FUNC_REGISTERREGULATOR,
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Utf8String(_regulatorName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerRegulator(String _regulatorAddress, String _regulatorName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERREGULATOR,
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Utf8String(_regulatorName)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterRegulator(String _regulatorAddress, String _regulatorName) {
        final Function function = new Function(
                FUNC_REGISTERREGULATOR,
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Utf8String(_regulatorName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRegisterRegulatorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERREGULATOR,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
                );
    }

    public Tuple2<BigInteger, Regulator> getRegisterRegulatorOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERREGULATOR,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Regulator>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Regulator>(

                (BigInteger) results.get(0).getValue(),
                (Regulator) results.get(1)
                );
    }

    public Enterprise selectEnterpriseInfo(String _enterpriseAddress) throws ContractException {
        final Function function = new Function(FUNC_SELECTENTERPRISEINFO,
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Enterprise>() {}));
        return executeCallWithSingleValueReturn(function, Enterprise.class);
    }

    public TransactionReceipt selectQualificationInfo(String _enterpriseAddress) {
        final Function function = new Function(
                FUNC_SELECTQUALIFICATIONINFO,
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] selectQualificationInfo(String _enterpriseAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECTQUALIFICATIONINFO,
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelectQualificationInfo(String _enterpriseAddress) {
        final Function function = new Function(
                FUNC_SELECTQUALIFICATIONINFO,
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSelectQualificationInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECTQUALIFICATIONINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, Qualification> getSelectQualificationInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECTQUALIFICATIONINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Qualification>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Qualification>(

                (BigInteger) results.get(0).getValue(),
                (Qualification) results.get(1)
                );
    }

    public Tuple2<BigInteger, String> selectUserAddress(BigInteger _enterpriseID) throws ContractException {
        final Function function = new Function(FUNC_SELECTUSERADDRESS,
                Arrays.<Type>asList(new Uint256(_enterpriseID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, String>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue());
    }

    public TransactionReceipt signIn(String _enterpriseAddress) {
        final Function function = new Function(
                FUNC_SIGNIN,
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] signIn(String _enterpriseAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SIGNIN,
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSignIn(String _enterpriseAddress) {
        final Function function = new Function(
                FUNC_SIGNIN,
                Arrays.<Type>asList(new Address(_enterpriseAddress)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSignInInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SIGNIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, BigInteger> getSignInOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SIGNIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt updateBalance(BigInteger _amount) {
        final Function function = new Function(
                FUNC_UPDATEBALANCE,
                Arrays.<Type>asList(new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateBalance(BigInteger _amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEBALANCE,
                Arrays.<Type>asList(new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateBalance(BigInteger _amount) {
        final Function function = new Function(
                FUNC_UPDATEBALANCE,
                Arrays.<Type>asList(new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getUpdateBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateEnterprise(String _enterpriseAddress, String _enterpriseName) {
        final Function function = new Function(
                FUNC_UPDATEENTERPRISE,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateEnterprise(String _enterpriseAddress, String _enterpriseName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEENTERPRISE,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateEnterprise(String _enterpriseAddress, String _enterpriseName) {
        final Function function = new Function(
                FUNC_UPDATEENTERPRISE,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_enterpriseName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getUpdateEnterpriseInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEENTERPRISE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt uploadQualification(String _enterpriseAddress, String _qualificationName, String _qualificationContent, String _qualificationLeader, String _qualificationIndustry, String _qualificationUserName) {
        final Function function = new Function(
                FUNC_UPLOADQUALIFICATION,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_qualificationName),
                new Utf8String(_qualificationContent),
                new Utf8String(_qualificationLeader),
                new Utf8String(_qualificationIndustry),
                new Utf8String(_qualificationUserName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] uploadQualification(String _enterpriseAddress, String _qualificationName, String _qualificationContent, String _qualificationLeader, String _qualificationIndustry, String _qualificationUserName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPLOADQUALIFICATION,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_qualificationName),
                new Utf8String(_qualificationContent),
                new Utf8String(_qualificationLeader),
                new Utf8String(_qualificationIndustry),
                new Utf8String(_qualificationUserName)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUploadQualification(String _enterpriseAddress, String _qualificationName, String _qualificationContent, String _qualificationLeader, String _qualificationIndustry, String _qualificationUserName) {
        final Function function = new Function(
                FUNC_UPLOADQUALIFICATION,
                Arrays.<Type>asList(new Address(_enterpriseAddress),
                new Utf8String(_qualificationName),
                new Utf8String(_qualificationContent),
                new Utf8String(_qualificationLeader),
                new Utf8String(_qualificationIndustry),
                new Utf8String(_qualificationUserName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, String, String, String, String, String> getUploadQualificationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPLOADQUALIFICATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, String, String, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue()
                );
    }

    public Tuple3<BigInteger, String, Qualification> getUploadQualificationOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPLOADQUALIFICATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Qualification>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, Qualification>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (Qualification) results.get(2)
                );
    }

    public String userIdQueryAddress(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_USERIDQUERYADDRESS,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt verifyQualification(String _regulatorAddress, String _enterpriseAddress, Boolean _isApprove) {
        final Function function = new Function(
                FUNC_VERIFYQUALIFICATION,
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Address(_enterpriseAddress),
                new Bool(_isApprove)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] verifyQualification(String _regulatorAddress, String _enterpriseAddress, Boolean _isApprove, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VERIFYQUALIFICATION,
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Address(_enterpriseAddress),
                new Bool(_isApprove)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVerifyQualification(String _regulatorAddress, String _enterpriseAddress, Boolean _isApprove) {
        final Function function = new Function(
                FUNC_VERIFYQUALIFICATION,
                Arrays.<Type>asList(new Address(_regulatorAddress),
                new Address(_enterpriseAddress),
                new Bool(_isApprove)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, Boolean> getVerifyQualificationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VERIFYQUALIFICATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, Boolean>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (Boolean) results.get(2).getValue()
                );
    }

    public Tuple2<BigInteger, Qualification> getVerifyQualificationOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VERIFYQUALIFICATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Qualification>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Qualification>(

                (BigInteger) results.get(0).getValue(),
                (Qualification) results.get(1)
                );
    }

    public static CarbonUserService load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new CarbonUserService(contractAddress, client, credential);
    }

    public static CarbonUserService deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(CarbonUserService.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Enterprise extends DynamicStruct {
        public BigInteger enterpriseId;

        public String enterpriseAddress;

        public String enterpriseName;

        public BigInteger enterpriseBalance;

        public BigInteger enterpriseTotalEmission;

        public BigInteger enterpriseOverEmission;

        public BigInteger enterpriseCarbonCredits;

        public Boolean enterpriseVerified;

        public BigInteger userType;

        public BigInteger qualificationId;

        public Enterprise(Uint256 enterpriseId, Address enterpriseAddress, Utf8String enterpriseName, Uint256 enterpriseBalance, Uint256 enterpriseTotalEmission, Uint256 enterpriseOverEmission, Uint256 enterpriseCarbonCredits, Bool enterpriseVerified, Uint8 userType, Uint256 qualificationId) {
            super(enterpriseId,enterpriseAddress,enterpriseName,enterpriseBalance,enterpriseTotalEmission,enterpriseOverEmission,enterpriseCarbonCredits,enterpriseVerified,userType,qualificationId);
            this.enterpriseId = enterpriseId.getValue();
            this.enterpriseAddress = enterpriseAddress.getValue();
            this.enterpriseName = enterpriseName.getValue();
            this.enterpriseBalance = enterpriseBalance.getValue();
            this.enterpriseTotalEmission = enterpriseTotalEmission.getValue();
            this.enterpriseOverEmission = enterpriseOverEmission.getValue();
            this.enterpriseCarbonCredits = enterpriseCarbonCredits.getValue();
            this.enterpriseVerified = enterpriseVerified.getValue();
            this.userType = userType.getValue();
            this.qualificationId = qualificationId.getValue();
        }

        public Enterprise(BigInteger enterpriseId, String enterpriseAddress, String enterpriseName, BigInteger enterpriseBalance, BigInteger enterpriseTotalEmission, BigInteger enterpriseOverEmission, BigInteger enterpriseCarbonCredits, Boolean enterpriseVerified, BigInteger userType, BigInteger qualificationId) {
            super(new Uint256(enterpriseId),new Address(enterpriseAddress),new Utf8String(enterpriseName),new Uint256(enterpriseBalance),new Uint256(enterpriseTotalEmission),new Uint256(enterpriseOverEmission),new Uint256(enterpriseCarbonCredits),new Bool(enterpriseVerified),new Uint8(userType),new Uint256(qualificationId));
            this.enterpriseId = enterpriseId;
            this.enterpriseAddress = enterpriseAddress;
            this.enterpriseName = enterpriseName;
            this.enterpriseBalance = enterpriseBalance;
            this.enterpriseTotalEmission = enterpriseTotalEmission;
            this.enterpriseOverEmission = enterpriseOverEmission;
            this.enterpriseCarbonCredits = enterpriseCarbonCredits;
            this.enterpriseVerified = enterpriseVerified;
            this.userType = userType;
            this.qualificationId = qualificationId;
        }
    }

    public static class Regulator extends DynamicStruct {
        public BigInteger regulatorId;

        public String regulatorAddress;

        public String regulatorName;

        public BigInteger userType;

        public Regulator(Uint256 regulatorId, Address regulatorAddress, Utf8String regulatorName, Uint8 userType) {
            super(regulatorId,regulatorAddress,regulatorName,userType);
            this.regulatorId = regulatorId.getValue();
            this.regulatorAddress = regulatorAddress.getValue();
            this.regulatorName = regulatorName.getValue();
            this.userType = userType.getValue();
        }

        public Regulator(BigInteger regulatorId, String regulatorAddress, String regulatorName, BigInteger userType) {
            super(new Uint256(regulatorId),new Address(regulatorAddress),new Utf8String(regulatorName),new Uint8(userType));
            this.regulatorId = regulatorId;
            this.regulatorAddress = regulatorAddress;
            this.regulatorName = regulatorName;
            this.userType = userType;
        }
    }

    public static class Qualification extends DynamicStruct {
        public BigInteger qualificationId;

        public String qualificationName;

        public String qualificationContent;

        public String qualificationLeader;

        public String qualificationIndustry;

        public String qualificationUserName;

        public BigInteger qualificationUploadTime;

        public BigInteger qualificationAuditTime;

        public String qualificationVerifiedRegulator;

        public BigInteger qualificationEmissionLimit;

        public Qualification(Uint256 qualificationId, Utf8String qualificationName, Utf8String qualificationContent, Utf8String qualificationLeader, Utf8String qualificationIndustry, Utf8String qualificationUserName, Uint256 qualificationUploadTime, Uint256 qualificationAuditTime, Address qualificationVerifiedRegulator, Uint256 qualificationEmissionLimit) {
            super(qualificationId,qualificationName,qualificationContent,qualificationLeader,qualificationIndustry,qualificationUserName,qualificationUploadTime,qualificationAuditTime,qualificationVerifiedRegulator,qualificationEmissionLimit);
            this.qualificationId = qualificationId.getValue();
            this.qualificationName = qualificationName.getValue();
            this.qualificationContent = qualificationContent.getValue();
            this.qualificationLeader = qualificationLeader.getValue();
            this.qualificationIndustry = qualificationIndustry.getValue();
            this.qualificationUserName = qualificationUserName.getValue();
            this.qualificationUploadTime = qualificationUploadTime.getValue();
            this.qualificationAuditTime = qualificationAuditTime.getValue();
            this.qualificationVerifiedRegulator = qualificationVerifiedRegulator.getValue();
            this.qualificationEmissionLimit = qualificationEmissionLimit.getValue();
        }

        public Qualification(BigInteger qualificationId, String qualificationName, String qualificationContent, String qualificationLeader, String qualificationIndustry, String qualificationUserName, BigInteger qualificationUploadTime, BigInteger qualificationAuditTime, String qualificationVerifiedRegulator, BigInteger qualificationEmissionLimit) {
            super(new Uint256(qualificationId),new Utf8String(qualificationName),new Utf8String(qualificationContent),new Utf8String(qualificationLeader),new Utf8String(qualificationIndustry),new Utf8String(qualificationUserName),new Uint256(qualificationUploadTime),new Uint256(qualificationAuditTime),new Address(qualificationVerifiedRegulator),new Uint256(qualificationEmissionLimit));
            this.qualificationId = qualificationId;
            this.qualificationName = qualificationName;
            this.qualificationContent = qualificationContent;
            this.qualificationLeader = qualificationLeader;
            this.qualificationIndustry = qualificationIndustry;
            this.qualificationUserName = qualificationUserName;
            this.qualificationUploadTime = qualificationUploadTime;
            this.qualificationAuditTime = qualificationAuditTime;
            this.qualificationVerifiedRegulator = qualificationVerifiedRegulator;
            this.qualificationEmissionLimit = qualificationEmissionLimit;
        }
    }

    public static class EnterpriseEmissionEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _emissionEmission;
    }

    public static class SellEmissionLimitEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger _emissionLimitCount;

        public BigInteger _amount;
    }

    public static class TransferEmissionLimitEventResponse {
        public TransactionReceipt.Logs log;

        public String _from;

        public String _to;

        public BigInteger _amount;
    }

    public static class UpdateBalnceEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _amount;
    }

    public static class UpdateEmissionLimitEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _emissionLimit;
    }

    public static class UpdateEnterpriseEmissionEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _totalEmissions;
    }

    public static class UploadEnterpriseEmissionEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _emissionEmission;
    }

    public static class UploadQualificationEventResponse {
        public TransactionReceipt.Logs log;

        public String _acount;

        public byte[] _name;

        public byte[] _content;
    }

    public static class UserRegisteredEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddress;

        public BigInteger _registerTime;
    }

    public static class VerifyEnterpriseEmissionEventResponse {
        public TransactionReceipt.Logs log;

        public String _form;

        public String _to;

        public Boolean _isAppore;
    }

    public static class VerifyQualificationEventResponse {
        public TransactionReceipt.Logs log;

        public String _enterpriseAddr;

        public BigInteger _emissionLimit;
    }
}
